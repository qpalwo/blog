{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/xyx.png","path":"images/xyx.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/xyx.svg","path":"images/xyx.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"c1a9d713d99645108199c931684142e407bbd03c","modified":1576069496165},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1575945596242},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1575945596242},{"_id":"themes/next/.DS_Store","hash":"5e9dc50013e0f8677adf22dfab1533837b2070ec","modified":1576026117966},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1575945596244},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1575945596242},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1575945596245},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1575945596245},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1575945596245},{"_id":"themes/next/README.md","hash":"dc026053a4d9fb97a58dbc3e9060e480f6852b23","modified":1575945596245},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1575945596246},{"_id":"themes/next/_config.yml~","hash":"f58d6654f447e341037e10ce5c2d993678db8e8f","modified":1576052797777},{"_id":"themes/next/gulpfile.js","hash":"72e6d5a6e32d5f95d82e4c4d0c963d39555bb760","modified":1575945596250},{"_id":"themes/next/_config.yml","hash":"a4cb252101a2427de18a94e7449c20a4d8fbdcf0","modified":1576054285723},{"_id":"themes/next/package.json","hash":"61aa2ac422e92ad435d1bfedea8d41824f5fe85e","modified":1575945596276},{"_id":"source/_posts/.DS_Store","hash":"191b002c656b72c359c093c8b299cf762bf8d371","modified":1576069496165},{"_id":"source/_posts/git-internal.md","hash":"b162953942016dad9d750920f4867f45166e61d2","modified":1576069725792},{"_id":"source/_posts/helloc-cookbook.md","hash":"0ab45587ae977505d99f7e7ceefe5ecc67fe68c7","modified":1576069185790},{"_id":"source/_posts/init.md","hash":"fcac30196f6d3b29c47cca87189db014a1241e4c","modified":1576069130909},{"_id":"source/about/.DS_Store","hash":"175c241aeb01ef741bd5b61b0da4eea0fa61e6bd","modified":1576026117967},{"_id":"themes/next/.git_bak/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1575945596235},{"_id":"themes/next/.git_bak/config","hash":"e2ca9fa6f115d4406d24bf0df53fc26ce13e0c9b","modified":1575945596236},{"_id":"themes/next/.git_bak/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1575945587051},{"_id":"source/about/index.md","hash":"dd83b5265db1f06fb304967f60218c8f86258f87","modified":1576053956262},{"_id":"themes/next/.git_bak/packed-refs","hash":"29683254566c746eb41cf9cbdde3c8029194a157","modified":1575945596233},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1575945596242},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"f4825dd07e8c524f4be3fe99d36069828c1b8535","modified":1575945596242},{"_id":"themes/next/.git_bak/index","hash":"9e89cc4c41e648c82247b2f9e250b68223f3eb17","modified":1575945801407},{"_id":"themes/next/.github/config.yml","hash":"e4f4b9afe59bc508c4f7634895b33d7d460a7cb1","modified":1575945596243},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"2a4ff75ccb91d9001032c08e22489096b850bf4f","modified":1575945596243},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1575945596244},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"b09c85aa449f46bc025317ed196ec33a877f7c23","modified":1575945596244},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1575945596244},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1575945596244},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1575945596244},{"_id":"themes/next/.github/stale.yml","hash":"941209526c2f7d916c76163c9e1ac1af9d956679","modified":1575945596244},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1575945596244},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1575945596246},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"5b4c013e0598b3211ebd899265936cfdaf7c139f","modified":1575945596246},{"_id":"themes/next/docs/DATA-FILES.md","hash":"d0d46cb265f0efceffce82214cd36d8b82ddce13","modified":1575945596247},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1575945596246},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"08cda41b4bcf687facfda19ab39718ec7a05ae54","modified":1575945596247},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1575945596247},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1575945596247},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"199e9ef3cb5928af0fe801d03d2d1aeea704cea4","modified":1575945596247},{"_id":"themes/next/docs/MATH.md","hash":"f520b336f16665e164d6edf075bdcc6aa17b31bc","modified":1575945596247},{"_id":"themes/next/layout/_layout.swig","hash":"29ee038b0d5ffdb45327598733ea968588367769","modified":1575945596254},{"_id":"themes/next/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1575945596275},{"_id":"themes/next/layout/archive.swig","hash":"26526c09a4334099e2141456697696fcd1f9783f","modified":1575945596274},{"_id":"themes/next/layout/page.swig","hash":"e61d64c055b6497a04affc143f47fdd0a6dc495b","modified":1575945596275},{"_id":"themes/next/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1575945596275},{"_id":"themes/next/layout/post.swig","hash":"382d9f9a9b35e1f369585f7f9f9b5dd6fa58d2f0","modified":1575945596275},{"_id":"themes/next/layout/index.swig","hash":"3bc6fb1e9707d74b96e1346d3f03fe6584f764f4","modified":1575945596275},{"_id":"themes/next/languages/en.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1575945596251},{"_id":"themes/next/languages/de.yml","hash":"285b294b1dd2ce49b0694beb4fd75ed05dc20ccb","modified":1575945596250},{"_id":"themes/next/languages/default.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1575945596251},{"_id":"themes/next/languages/fr.yml","hash":"5fe560d14824c71ea90b2a76d0c17b2332b9d08a","modified":1575945596251},{"_id":"themes/next/languages/es.yml","hash":"3bd0977225a9b9dc3cdc856161b3a77e5993ac4a","modified":1575945596251},{"_id":"themes/next/languages/fa.yml","hash":"35468531ad0236df5b188f28bd1b4bb0c0537faf","modified":1575945596251},{"_id":"themes/next/languages/ja.yml","hash":"e61529ddf80426a5362ed07642216027615bd740","modified":1575945596252},{"_id":"themes/next/languages/hu.yml","hash":"dd9e4cd2873ed9a9ae7cb89962eeff911de396b4","modified":1575945596251},{"_id":"themes/next/languages/it.yml","hash":"68ac5a0aa361210f51915e101c842ed1c9464889","modified":1575945596252},{"_id":"themes/next/languages/id.yml","hash":"80c3db4c2dbbea0703f6c8f1191218f692899507","modified":1575945596251},{"_id":"themes/next/languages/ko.yml","hash":"14a162509dc71bb364335c20281d3bccbd2a51f3","modified":1575945596252},{"_id":"themes/next/languages/nl.yml","hash":"4d9b09aff03648cbbbfeb0c51a2d1214320b5ec6","modified":1575945596252},{"_id":"themes/next/languages/pt.yml","hash":"88fb58e537a949c013a2adcdaebcbe09543c0bd2","modified":1575945596252},{"_id":"themes/next/languages/pt-BR.yml","hash":"024dcdeb30c93e57cd1ba4cd707f8988dcad2468","modified":1575945596252},{"_id":"themes/next/languages/ru.yml","hash":"f7d5efd6289845f2375bbee8fe883813de745767","modified":1575945596252},{"_id":"themes/next/languages/tr.yml","hash":"e08d8d6ee9507a7c7d4450bc1c76b435470a3739","modified":1575945596253},{"_id":"themes/next/languages/uk.yml","hash":"e58393cf726401bf50a772392e23507d9e11049e","modified":1575945596253},{"_id":"themes/next/languages/vi.yml","hash":"0c0890ccffcb5cca0893de63ebad66e3ce740707","modified":1575945596253},{"_id":"themes/next/languages/zh-CN.yml","hash":"4b36a51556e87d236c6ac6ee6975de1beb95724c","modified":1575945596253},{"_id":"themes/next/languages/zh-HK.yml","hash":"6d83daf9df1811e3ae6cde5ad778c888d8027b13","modified":1575945596253},{"_id":"themes/next/languages/zh-TW.yml","hash":"5e395cb492a0b6284f8d2ffdd93f7380db31486f","modified":1575945596253},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1575945596282},{"_id":"themes/next/source/.DS_Store","hash":"b44fdb24c2743e5c6c5ab13ac09e8bfff725c2b0","modified":1576027035576},{"_id":"source/_posts/git-internal/image-20191022162231775.png","hash":"2901f72b8e5522f1dc9522716d2b505b6bd652e1","modified":1571732551775},{"_id":"source/_posts/git-internal/image-20191022162711988.png","hash":"a9d9ebb79745ff10da641d2b9da1dbb46011ef38","modified":1571732831989},{"_id":"source/_posts/git-internal/data-model-1.png","hash":"f5bfc067f78200cabf156d14a791b12f81e89e3a","modified":1571734056260},{"_id":"source/_posts/git-internal/image-20191022164648393.png","hash":"bac6dfd98791b8837f22c4831c694a3f9840f5f8","modified":1571734008393},{"_id":"source/_posts/git-internal/image-20191022170637922.png","hash":"ddf02092be210f5394d8bd73b0427f60801a9e16","modified":1571735197922},{"_id":"source/_posts/git-internal/image-20191022171731843.png","hash":"34ee5e43ae43522b3b14adb9f4d77f3d7e84363a","modified":1571735851844},{"_id":"source/_posts/hello-cookbook/image-20191128234753437.png","hash":"85c9db0fdf7bd60f015406233ed95e1e3d77867b","modified":1574956073437},{"_id":"source/_posts/hello-cookbook/image-20191206143822656.png","hash":"180b5bb2abe620ec7f3e40d44407508058e0d318","modified":1575614302658},{"_id":"source/_posts/hello-cookbook/image-20191206150718592.png","hash":"64d4de77f97abc50e51c21f0c4009420ba565f07","modified":1575616038592},{"_id":"themes/next/.git_bak/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1575945587052},{"_id":"themes/next/.git_bak/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1575945587052},{"_id":"themes/next/.git_bak/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1575945587052},{"_id":"themes/next/.git_bak/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1575945587053},{"_id":"themes/next/.git_bak/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1575945587053},{"_id":"themes/next/.git_bak/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1575945587052},{"_id":"themes/next/.git_bak/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1575945587053},{"_id":"themes/next/.git_bak/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1575945587053},{"_id":"themes/next/.git_bak/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1575945587053},{"_id":"themes/next/.git_bak/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1575945587052},{"_id":"themes/next/.git_bak/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1575945587053},{"_id":"themes/next/.git_bak/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1575945587051},{"_id":"themes/next/.git_bak/logs/HEAD","hash":"4ae67665789e2e6ff509687c1ee1345f6fee3ae6","modified":1575945596235},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"80c31b258f404a16ffc19706c5e5aa3ccb8c887e","modified":1575945596243},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"bf8b10715f5529cc6997501d821307895710ba58","modified":1575945596243},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"2f85f500781124b1848cc419f864797399fcdabc","modified":1575945596243},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6d79701dd0bb3757722650d9df30eeaacd83344e","modified":1575945596243},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"2665f6a9d72090f9452a8811544ff2596e8899be","modified":1575945596248},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1575945596248},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1575945596248},{"_id":"themes/next/docs/ru/README.md","hash":"41b1bef32fb991410ebf559b4c45022549f95215","modified":1575945596248},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"4245fe9472647226692fcbdd5a52d6e6dcd251bc","modified":1575945596248},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"ebacdc94f6f9724a7c6ef7c3cdde41ff7c37931a","modified":1575945596248},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"3b4dbf0d2ca12ab442b7e0e227769ce100b8a444","modified":1575945596249},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bc159df1260e0c912c509090d54dd20a08201100","modified":1575945596249},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1575945596249},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"264d131b8865bae069f8e4d78a33a0f59d28e36b","modified":1575945596249},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"2d60a18340c9260cd4dc81fe8acc7983d6b2d011","modified":1575945596249},{"_id":"themes/next/docs/zh-CN/README.md","hash":"b6a3611d40863c12804c5846994786119ce3b79f","modified":1575945596250},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"8109a531d3a7f5a306e36d4304c11f0c7c180c87","modified":1575945596250},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1575945596254},{"_id":"themes/next/layout/_macro/post.swig","hash":"049caf88e2cb8dde780b0c6196db984c7bc3a4cc","modified":1575945596254},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e2c9db54cc9e154e882008fde6588b065fadc9a7","modified":1575945596254},{"_id":"themes/next/layout/_partials/footer.swig","hash":"434a4979c376c1ff27380c778d0261fea8d0a0a4","modified":1575945596255},{"_id":"themes/next/layout/_partials/comments.swig","hash":"0c4914a5fd08f15beec71940218c814ad9a89f3f","modified":1575945596254},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1575945596257},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1575945596260},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1575945596260},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1575945596261},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"9675acc599ffa546f05a60375c1637b0327be4fd","modified":1575945596261},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1575945596263},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1575945596263},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1575945596266},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1575945596270},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"dd6bd817cb69b5ad5e9746498146314b54054ff8","modified":1575945596271},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1575945596271},{"_id":"themes/next/scripts/events/index.js","hash":"9047d8ae2670e43429b16a7919a08a0a0a81afe0","modified":1575945596276},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1575945596280},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1575945596280},{"_id":"themes/next/scripts/filters/locals.js","hash":"5bbfdc1c373542159660b7a68ed0b57ca18ad10b","modified":1575945596280},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1575945596280},{"_id":"themes/next/scripts/filters/post.js","hash":"5e5035372b3d94a65309334c93303c858e072012","modified":1575945596281},{"_id":"themes/next/scripts/helpers/engine.js","hash":"c8c8afde59df587f883dd9b47a3c629042bc4c6e","modified":1575945596281},{"_id":"themes/next/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1575945596281},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"58347687b02f7ab5e64bef07525c8efa97c9e8fb","modified":1575945596282},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1575945596282},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1575945596282},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1575945596283},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1575945596283},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1575945596283},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1575945596283},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1575945596284},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1575945596284},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1575945596284},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1575945596284},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1575945596305},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1575945596306},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1575945596306},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1575945596306},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1575945596306},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1575945596306},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1575945596306},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1575945596307},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1575945596307},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1575945596307},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1575945596307},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1575945596308},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1575945596307},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1575945596308},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1575945596308},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1575945596308},{"_id":"themes/next/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1575945596308},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1575945596309},{"_id":"themes/next/source/js/motion.js","hash":"09f8be6bcc6920546bb06e3f8c0181ec62c70b90","modified":1575945596309},{"_id":"themes/next/source/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1575945596309},{"_id":"themes/next/source/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1575945596309},{"_id":"themes/next/source/js/utils.js","hash":"4ea7d83e2b26b810ee4e847033c4f7e91278f37c","modified":1575945596310},{"_id":"themes/next/source/images/xyx.png","hash":"f3352da63fb3c9783023c2ed1973e7fbc3423def","modified":1576026158000},{"_id":"themes/next/source/images/xyx.svg","hash":"3592b29d50202d2c73fa14948658ea7b6a107e6f","modified":1576026158000},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1575945596311},{"_id":"source/_posts/git-internal/image-20191022171907654.png","hash":"2395abb581a9e608434277467e5b8ecfd51e4b25","modified":1571735947656},{"_id":"source/_posts/hello-cookbook/image-20191202110013586.png","hash":"480a50485ec20bec08bfc7d8b17fead1edd4e370","modified":1575255613589},{"_id":"source/_posts/hello-cookbook/image-20191202110131130.png","hash":"b0192b8c1769c631d9c71a05bc8cde13ea7e5421","modified":1575255691132},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1575945596301},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1575945596301},{"_id":"themes/next/.git_bak/refs/heads/master","hash":"0f6728eeca0c0c4add7b3155ff00fa60990a64a0","modified":1575945596235},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"0172055d118d1d7f4c8379c8495c1ee1aa50c7d9","modified":1575945596255},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"1638483d2d2dad1da4c841a6fb9f6ee96b850187","modified":1575945596255},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"7487ca8f0e4b16351ea0d6b35dc52b0d32176d57","modified":1575945596256},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1575945596256},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"ff33b5797f5e4b5cbcb3c222c17bc636c6b88df6","modified":1575945596256},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d488664bc16608b5f829f959c2058b4381be244a","modified":1575945596256},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1575945596257},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"fbec9f77139e1f300509c38446416b4b26350cfa","modified":1575945596256},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1575945596257},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"94d54b0c65d504f772af1e62424952e092b6c21d","modified":1575945596257},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1575945596258},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1575945596258},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"78cb2077f50bc3b81130a516ffc04bc1fcea5834","modified":1575945596258},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1575945596259},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1575945596258},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1575945596259},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"716b78cd90addc4216413719554721cb362b0c18","modified":1575945596260},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1575945596262},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"d5a5f45ef0b41332cad069d263df2c449e2f1e7e","modified":1575945596261},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1575945596262},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1575945596262},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1575945596262},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1575945596263},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1575945596264},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1575945596265},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1575945596265},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1575945596267},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1575945596267},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1ef172bc041d6f6b6c8c642ea64496a188d79029","modified":1575945596269},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1575945596268},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"d3dc3e051e6816cdd576d00cc70b18b8a4c6a495","modified":1575945596269},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1575945596269},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"0992d51dff4b8f4f4e69834c8cd1604593536c5d","modified":1575945596269},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4d6f9e09ca4056ff6a5d4923e202126a75242183","modified":1575945596270},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1575945596270},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1575945596271},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"fb27a38f9a4b8fcba4f637b03904f7a83cc73416","modified":1575945596271},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"e456d7a2aaabe55447f78cd952b30d70a6c1e742","modified":1575945596271},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1575945596272},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1575945596272},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1575945596272},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1575945596272},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"0ea0bac09b0747bc16fde852164c0eaab2efe02c","modified":1575945596273},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1575945596273},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"4a7207c6f9ab0e56ea8f59aca3ed4c2cb2fb7450","modified":1575945596273},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"4958fa997ff6df2b2ce05341f40cc3a81b0f91bb","modified":1575945596274},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"7fa72dc60c078842979861622839b109683e05a3","modified":1575945596274},{"_id":"themes/next/scripts/events/lib/config.js","hash":"b205d72a56b1827681f0a260c266e0c02065fd08","modified":1575945596277},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1575945596277},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1575945596277},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1f20213af8da3127701e6bb9da995e5c91be2051","modified":1575945596278},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1575945596278},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1575945596278},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"5ba0480c2dbb0626501c90c920be85ce2308103c","modified":1575945596279},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1575945596279},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1575945596279},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1575945596279},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"e24c4dd78f6e4adee0e7c15eb8bca12eb92452e4","modified":1575945596279},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1575945596301},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1575945596301},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0a25f3df1b5c39794365efde387647da81da884a","modified":1575945596301},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"b9d7058db61df7bbd2b58779efe45621a06ffc18","modified":1575945596305},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c261d685c5ed0df34718d94bb2ba977c0ed443e6","modified":1575945596305},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"52550138127ae9ebbe049bcdacd94d767c003855","modified":1575945596305},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"50bc57e66331c0f15a4527010b4ca3316ac92403","modified":1575945596305},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d4e817e2b238ace5d7ac568ce0c5380196a6d039","modified":1575945596305},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1575945596311},{"_id":"themes/next/source/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1575945596310},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"52d139e6f3bc212c8c9b71bc9e57e931920434a6","modified":1575945596310},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1575945596311},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1575945596311},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1575945596312},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1575945596312},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1575945596315},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1575945596316},{"_id":"themes/next/.git_bak/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1575945596234},{"_id":"themes/next/.git_bak/logs/refs/heads/master","hash":"4ae67665789e2e6ff509687c1ee1345f6fee3ae6","modified":1575945596235},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"80d359661d08b80ad561b97f8508766b3e1f6d01","modified":1575945596285},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"47ee915d7b0a97e74140a25fbfc01c04d6781534","modified":1575945596285},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"41c7cd1b63d49476ed5fbdd26ab9411d8f44bd05","modified":1575945596290},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"112f5e8f1fe5cec4419e87acfbdef0e615ed23f3","modified":1575945596285},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"170c4598cbbe49cd1527f94158d97d2320a6b906","modified":1575945596290},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1575945596294},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"d8ba44b8e1a0332c5c1079ff65fc83d2918a5865","modified":1575945596297},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4f7879a50d4608c46cc2061c725a2564597a45bd","modified":1575945596297},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1575945596294},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1575945596297},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1575945596299},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"2b52b0eb4c66e06762cf115450da0ca1dd435e75","modified":1575945596299},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1575945596299},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1575945596299},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1575945596300},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"24a086a6904bbf5355a354403c9b0e6069f7eb01","modified":1575945596302},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"1693ec6b53758ac15d2c7798c789d6ae8af913ea","modified":1575945596302},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4fb385d8533877678440c8faa08b68fa793cb1a2","modified":1575945596302},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"48743ac61af37a4de2026667e15a65de5e8cf542","modified":1575945596302},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e321bd62f5e04d1fdc101a470ec13604e99816a5","modified":1575945596302},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1575945596302},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1575945596303},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1575945596303},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c6905c694c6fbbf372b53456a0d219701010a110","modified":1575945596303},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"eeab294e14abbae231107e1a327e907b25323136","modified":1575945596303},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1575945596303},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1575945596303},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1575945596304},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f5abb2ea7746586738fb4e82107fceed041708ee","modified":1575945596304},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"71a3d7f2242706f7a6b79933a67ef3664cca3a24","modified":1575945596304},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d7587df06b30042091316d8b1cc58ba361211492","modified":1575945596304},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0424a1fcffa1ae82fe70935972a894aca885bf9a","modified":1575945596304},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1575945596304},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1575945596312},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1575945596312},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1575945596313},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1575945596315},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1575945596315},{"_id":"themes/next/.git_bak/logs/refs/remotes/origin/HEAD","hash":"4ae67665789e2e6ff509687c1ee1345f6fee3ae6","modified":1575945596234},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1575945596286},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1575945596286},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1575945596285},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1575945596286},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6336c2b129db802221b1fd75e5fbe8aab85c0a1f","modified":1575945596286},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"98227b4de364b48b11e21efcf4f1beb2ed3ab329","modified":1575945596287},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"4b84f35e7040f9adb5cc540c366d7f9eb4c48bcc","modified":1575945596287},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1575945596287},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"5d5c022aa3b2f89c2f2a178212338bb64804dd75","modified":1575945596287},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1575945596288},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"bcba503e956e4b737b062faa66341bd880f16c10","modified":1575945596288},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9df5ba77e6cf36129bddc270407215c23c60ff38","modified":1575945596288},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1575945596289},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1575945596288},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1575945596289},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1575945596290},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"284249dcfa3b49c5d76210bbb0f74f65fc2f12ea","modified":1575945596290},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1575945596291},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1575945596291},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1575945596291},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"2d9d68a431a334626d463bb1bdfbcd2ea8242e94","modified":1575945596292},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1575945596292},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"f5821481440a0624c8aec5fc85f093de1527095f","modified":1575945596292},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1575945596292},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"0672ea2acf28dcc2cfc5244da36d3387d71a17cb","modified":1575945596293},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"4b237e2344f35e9d1f6dbc3842d5e432d478ebfd","modified":1575945596293},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1575945596293},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a7ed54e2f52185a7b6bb9a8201f6c3aa74b0cb00","modified":1575945596294},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"d5d85d3646d184e0340924addcfd2523fb289d00","modified":1575945596293},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"c27b3056d5e22d3c66d8a152a23634314d5c4a60","modified":1575945596294},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1575945596295},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1575945596295},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1575945596295},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1575945596295},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"1db4ce981fe9fcb9ee4279395c29553efbb43947","modified":1575945596296},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1575945596295},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"e2ad7ccf1865a45548e3f31c70fac2c65d6ef534","modified":1575945596296},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1575945596296},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"c83d750238d6ac13b65869a909465fe621c464c3","modified":1575945596296},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"9a18b186b08ec220d1b17cf83812bcdd06077814","modified":1575945596297},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"b492a45422773ab2af06ee345d527ba4c6bbc608","modified":1575945596298},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1575945596298},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"ae13712e313aacfce989d97ed6cba0606c776fb3","modified":1575945596298},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1575945596298},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"5bf28a03ef021c27cfd713971caca5a0b9466fd1","modified":1575945596300},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1575945596299},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1575945596299},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"1a14c1b92d8a4dd8aabb5949333ac0ac79094c6c","modified":1575945596300},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1575945596300},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1575945596300},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"d2f0f2171722533bba308f944a2ec727b083582c","modified":1575945596300},{"_id":"themes/next/.git_bak/objects/pack/pack-d6b5f55dba88232639c8fe60e02e3c5ba5d35ab8.idx","hash":"aedca197a8c863b56c083aae6b4f2c707a52da9d","modified":1575945596221},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1575945596314},{"_id":"source/_posts/git-internal/image-20191022100218849.png","hash":"913fc5abc314431539f51694fd3d8a57382ecf9f","modified":1571709738850},{"_id":"themes/next/.git_bak/objects/pack/pack-d6b5f55dba88232639c8fe60e02e3c5ba5d35ab8.pack","hash":"d8661fd4ed01f5f34a3b110cc4f9c941a137a8f9","modified":1575945596216},{"_id":"public/about/index.html","hash":"f36ed41df17ec695caf1f97e8764a1f577abd5ea","modified":1576069740111},{"_id":"public/archives/index.html","hash":"13b13672316a01504cdfc58fb37d67b48ac52e57","modified":1576069740111},{"_id":"public/archives/2019/index.html","hash":"ceeb422c4de6196093f0c1b600298008cebe2be9","modified":1576069740111},{"_id":"public/archives/2019/12/index.html","hash":"892ab85db91322f602f61b88ff02727f6a92c6dd","modified":1576069740111},{"_id":"public/tags/compile/index.html","hash":"8a4f97bcf9906c25a595c504150ab8518cbba676","modified":1576069740111},{"_id":"public/2019/12/10/helloc-cookbook/index.html","hash":"283fdc020280f70e62c09ec4c08b3315c8c5bf3d","modified":1576069740111},{"_id":"public/index.html","hash":"c66608ab97ce8f2487a08f0b22d5417000045d92","modified":1576069740111},{"_id":"public/2019/10/17/init/index.html","hash":"3602ad8a8f258e39441a6907ff3a40213233c067","modified":1576069740111},{"_id":"public/archives/2019/10/index.html","hash":"4baaad9c124af041c79ea3ca014d5d2f21b2d4b4","modified":1576069740111},{"_id":"public/tags/git/index.html","hash":"0b272beb1443b5aa8addbd3e753ef4f2aa27bc9d","modified":1576069740111},{"_id":"public/tags/other/index.html","hash":"a08f383765d1af17656bb83dffc035aee6e8ec7f","modified":1576069740111},{"_id":"public/2019/10/17/git-internal/index.html","hash":"7ee4f9bb0839fb7ebb6e1100773245d6112cc03f","modified":1576069740111},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1576069740111},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1576069740111},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1576069740111},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1576069740111},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1576069740111},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1576069740111},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1576069740111},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1576069740111},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1576069740111},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1576069740111},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1576069740111},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1576069740111},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1576069740111},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1576069740111},{"_id":"public/images/xyx.svg","hash":"3592b29d50202d2c73fa14948658ea7b6a107e6f","modified":1576069740111},{"_id":"public/images/xyx.png","hash":"f3352da63fb3c9783023c2ed1973e7fbc3423def","modified":1576069740111},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1576069740111},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1576069740111},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1576069740111},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1576069740111},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1576069740111},{"_id":"public/2019/10/17/git-internal/data-model-1.png","hash":"f5bfc067f78200cabf156d14a791b12f81e89e3a","modified":1576069740111},{"_id":"public/2019/10/17/git-internal/image-20191022162231775.png","hash":"2901f72b8e5522f1dc9522716d2b505b6bd652e1","modified":1576069740111},{"_id":"public/2019/10/17/git-internal/image-20191022162711988.png","hash":"a9d9ebb79745ff10da641d2b9da1dbb46011ef38","modified":1576069740111},{"_id":"public/2019/10/17/git-internal/image-20191022164648393.png","hash":"bac6dfd98791b8837f22c4831c694a3f9840f5f8","modified":1576069740111},{"_id":"public/2019/10/17/git-internal/image-20191022171731843.png","hash":"34ee5e43ae43522b3b14adb9f4d77f3d7e84363a","modified":1576069740111},{"_id":"public/2019/10/17/git-internal/image-20191022170637922.png","hash":"ddf02092be210f5394d8bd73b0427f60801a9e16","modified":1576069740111},{"_id":"public/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1576069740111},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1576069740111},{"_id":"public/js/motion.js","hash":"09f8be6bcc6920546bb06e3f8c0181ec62c70b90","modified":1576069740111},{"_id":"public/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1576069740111},{"_id":"public/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1576069740111},{"_id":"public/js/utils.js","hash":"4ea7d83e2b26b810ee4e847033c4f7e91278f37c","modified":1576069740111},{"_id":"public/js/schemes/pisces.js","hash":"52d139e6f3bc212c8c9b71bc9e57e931920434a6","modified":1576069740111},{"_id":"public/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1576069740111},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1576069740111},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1576069740111},{"_id":"public/css/main.css","hash":"b0d0127a9706b44d7810f284a8d542cea5729117","modified":1576069740111},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1576069740111},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1576069740111},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1576069740111},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1576069740111},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1576069740111},{"_id":"public/2019/10/17/git-internal/image-20191022171907654.png","hash":"2395abb581a9e608434277467e5b8ecfd51e4b25","modified":1576069740111},{"_id":"public/2019/10/17/git-internal/image-20191022100218849.png","hash":"913fc5abc314431539f51694fd3d8a57382ecf9f","modified":1576069740111}],"Category":[],"Data":[],"Page":[{"title":"关于我","date":"2019-12-11T00:32:07.000Z","comments":0,"_content":"\n\n\n某某科技大学-软件工程\n\n***\n\nAndroid/flutter/~~iOS~~\n\nJava/C/kotlin\n\n计算机科学（包括但不局限于操作系统，编译原理，VM）\n\n***\n\n北京字节跳动直播中台客户端-实习生（已离职）\n\n某创团队-Android 组组长\n\n软件学院某创团队-Android 组\n\n***\n\nEmail: xyx@stdxyx.com\n\n***\n\n**用与众不同的眼光看世界**\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2019-12-11 08:32:07\ncomments: false\n\n---\n\n\n\n某某科技大学-软件工程\n\n***\n\nAndroid/flutter/~~iOS~~\n\nJava/C/kotlin\n\n计算机科学（包括但不局限于操作系统，编译原理，VM）\n\n***\n\n北京字节跳动直播中台客户端-实习生（已离职）\n\n某创团队-Android 组组长\n\n软件学院某创团队-Android 组\n\n***\n\nEmail: xyx@stdxyx.com\n\n***\n\n**用与众不同的眼光看世界**\n\n","updated":"2019-12-11T08:45:56.262Z","path":"about/index.html","layout":"page","_id":"ck41b8as70009xs86hurt7v2t","content":"<p>某某科技大学-软件工程</p>\n<hr>\n<p>Android/flutter/<del>iOS</del></p>\n<p>Java/C/kotlin</p>\n<p>计算机科学（包括但不局限于操作系统，编译原理，VM）</p>\n<hr>\n<p>北京字节跳动直播中台客户端-实习生（已离职）</p>\n<p>某创团队-Android 组组长</p>\n<p>软件学院某创团队-Android 组</p>\n<hr>\n<p>Email: <a href=\"mailto:xyx@stdxyx.com\" target=\"_blank\" rel=\"noopener\">xyx@stdxyx.com</a></p>\n<hr>\n<p><strong>用与众不同的眼光看世界</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>某某科技大学-软件工程</p>\n<hr>\n<p>Android/flutter/<del>iOS</del></p>\n<p>Java/C/kotlin</p>\n<p>计算机科学（包括但不局限于操作系统，编译原理，VM）</p>\n<hr>\n<p>北京字节跳动直播中台客户端-实习生（已离职）</p>\n<p>某创团队-Android 组组长</p>\n<p>软件学院某创团队-Android 组</p>\n<hr>\n<p>Email: <a href=\"mailto:xyx@stdxyx.com\" target=\"_blank\" rel=\"noopener\">xyx@stdxyx.com</a></p>\n<hr>\n<p><strong>用与众不同的眼光看世界</strong></p>\n"}],"Post":[{"title":"初学者对 git 的重新认识","date":"2019-10-17T12:59:43.000Z","_content":"\n\n\n## WIP\n\n还隐约记得当时第一次接触 git 时的场景。用一脸懵逼形容没有一点不妥。光是区分 git 和 github 的联系和区别就用了很久。看到一堆的命令也是感觉陌生而又头疼。对 Android Studio 提供的图形工具也是爱不释手。\n\n直到现在，也敲了很多命令，也使用 git 做了一些工作，又翻了一下 git 官方文档，才意识到了自己的成长。\n\n该文章写给初学者，但是为了不过多的停留在细节的东西，假设读者对命令行的工作方式有一定的认识，对 git 的功能有一定的了解，且假设读者对 Linux/Unix 有一定的认识。\n\n<!-- more -->\n\n# 初见\n\n我不知道大家在第一次使用 git 的时候是什么心理。但我当时一定是满头大汗自顾不暇的。沉迷于各种教程，却还是难得精髓。\n\n直到逐渐有了一点实践经验，才得空可以思考 git 是怎样做到这非常神奇的功能的。\n\n又翻开了 git 官方文档 [git 文档]([https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-%E5%BA%95%E5%B1%82%E5%91%BD%E4%BB%A4%E5%92%8C%E9%AB%98%E5%B1%82%E5%91%BD%E4%BB%A4](https://git-scm.com/book/zh/v2/Git-内部原理-底层命令和高层命令)) ，却有了完全不同的体验。发现了很多好玩的东西，有趣的干货。这部分内容就不在此赘述，之后可以再写一篇。本文的重心放在 git 内部原理上。\n\n# 正戏\n\n## 简述\n\n受到 git diff 的影响，其实我一直认为 git 保存的就是 diff 的内容。还一直好奇它是怎样做到如此高效的提取和恢复两个文件的 diff 。简单了解时候才发现这种说法可对可不对。\n\ngit 其实可以理解为是一个 K-V 数据库。\n\n没错 git 存贮的就是许许多多的 K-V 对。\n\nK 就是根据文件内容计算出来的哈希值。V 就是 加入描述性文本经 zlib 压缩后的文件内容。根据哈希的特性，只要文件内容发生了改变，那它的哈希值就会发生变化，从而 git 也就可以监测到文件的变化。\n\nK-V 是一种很神奇的结构，它表示了一种关系。它可以给两个原本可能互不相干的东西建立一种联系。而各种各样组织数据的方式都离不开这种联系。某种程度上可以把 key 看作指针，指向某个特定的内容。\n\n简单的讲，以上就是我所认识的 git 的全部。\n\n## 具体解释\n\n每一个 git 项目都有一个神奇的 .git 目录。这个目录里存储了 git 工作所需要的资料。刚刚我讲到 git 就是一个 K-V 数据库，而数据库的内容大部分都保存在 .git 目录下的 objects 文件夹中。\n\n{% asset_img image-20191022100218849.png img %}\n\n在这个文件夹中，会看到很多类似 1a、5b 一类的文件夹，文件夹里又是长长的看上去无意义的数字和字母的组合。其实这里涉及到一个很关键的概念，每个文件和它所在的文件夹的名字就是根据文件内容经过哈希函数所得的值，也就是 K-V 数据库中的 key。而文件的内容理所应当的就是文件的内容了。当然是在添加了一定的描述性文本经 zlib 压缩之后的内容，所以直接打开之后也是不可读的。\n\n每一个文件都是一个对象。每一个对象都代表着一段内容的哈希值到内容的联系。\n\n而 git 就是工作在这样许许多多的对象所构成的联系之上的。\n\n### 底层命令\n\n除了之前熟悉的 pull push 这一类的上层命令接口，git 还有一套底层命令，能够对 git 进行更加深入灵活的控制。这篇文章中会较多的涉及到一些底层命令的使用，也会通过用底层命令实现上层接口功能的方式来使读者更加深刻的理解 git 上层命令。\n\n文中会用到的底层命令如下：\n\n1. git hash-object 用于将一段内容生成 blob 对象\n2. git cat-file 用于显示出对象的内容\n\n### blob\n\nblob 对象是基本对象之一。每一个 blob 对象都代表着项目中的一个文件夹在某一个时刻的完整快照。\n\n调用 **git hash-object** 命令可以把一个 stdin 输入的流或者是一个文件经过 git 的规则转化成 blob 对象存入库中。\n\n{% asset_img image-20191022162231775.png img %}\n\n--stdin 表示从 stdin 接受输入内容。-w 参数表示把生成的对象保存到数据库中。\n\n输出的一段字符就是 git 通过特定的哈希算法根据文本内容所计算出的 hash code。也可理解为该 blob 对象的 key。\n\n可以通过 **git cat-file** 命令来验证我们的结果\n\n{% asset_img image-20191022162711988.png img %}\n\n-p 参数会输出对象的内容， -t 参数会输出对象的类型。由此可见我们刚刚通过 git 底层命令生成了一个 blob 类型的对象，它的 key 的前五位为 45b98，内容为 hi\n\n### tree\n\n简单来说可以把 blob 看作文件内容，但是可以想象，我们日常使用的文件系统都是树形结构，一个文件夹内可能还有多个文件夹或者多个文件。\n\n{% asset_img image-20191022164648393.png img %}\n\n如果说 blob 对应文件，那么 tree 对象可以理解为一个文件夹的角色，把文件组成文件系统。值得一提的是，一个文件的文件名是保存在 tree 对象中的，而不是 blob 对象中。\n\n{% asset_img data-model-1.png img %}\n\n通过 tree 对象和 blob 对象，git 便可以建立一个文件目录所需要的关联了。\n\ntree 对象的创建一般不像 blob 那样随意，往往要根据当前暂存区的状态生成一个 tree 对象。\n\n所以为了创建一个 tree 对象，我们要先创建一个暂存区。\n\n{% asset_img image-20191022170637922.png img %}\n\ngit update-index 命令可以创建一个暂存区，--add 参数表示将对象添加到暂存区，--cacheinfo 指示该对象来自对象库，100644 是文件模式，表示该文件为普通文件。最后一个参数指示该对象的名字。\n\n接下来就可以通过 git write-tree 命令产生一个 tree 对象并且写入对象库\n\n{% asset_img image-20191022171731843.png img %}\n\n可见我们创建了一个 tree 对象。并且有一个叫 test.file 的文件，且其 hash code 和我们之前的 hash code 一样。\n\n{% asset_img image-20191022171907654.png img %}\n\n### commit\n\n\n\n\n\n","source":"_posts/git-internal.md","raw":"---\ntitle: 初学者对 git 的重新认识\ndate: 2019-10-17 20:59:43\ntags: git\n\n---\n\n\n\n## WIP\n\n还隐约记得当时第一次接触 git 时的场景。用一脸懵逼形容没有一点不妥。光是区分 git 和 github 的联系和区别就用了很久。看到一堆的命令也是感觉陌生而又头疼。对 Android Studio 提供的图形工具也是爱不释手。\n\n直到现在，也敲了很多命令，也使用 git 做了一些工作，又翻了一下 git 官方文档，才意识到了自己的成长。\n\n该文章写给初学者，但是为了不过多的停留在细节的东西，假设读者对命令行的工作方式有一定的认识，对 git 的功能有一定的了解，且假设读者对 Linux/Unix 有一定的认识。\n\n<!-- more -->\n\n# 初见\n\n我不知道大家在第一次使用 git 的时候是什么心理。但我当时一定是满头大汗自顾不暇的。沉迷于各种教程，却还是难得精髓。\n\n直到逐渐有了一点实践经验，才得空可以思考 git 是怎样做到这非常神奇的功能的。\n\n又翻开了 git 官方文档 [git 文档]([https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-%E5%BA%95%E5%B1%82%E5%91%BD%E4%BB%A4%E5%92%8C%E9%AB%98%E5%B1%82%E5%91%BD%E4%BB%A4](https://git-scm.com/book/zh/v2/Git-内部原理-底层命令和高层命令)) ，却有了完全不同的体验。发现了很多好玩的东西，有趣的干货。这部分内容就不在此赘述，之后可以再写一篇。本文的重心放在 git 内部原理上。\n\n# 正戏\n\n## 简述\n\n受到 git diff 的影响，其实我一直认为 git 保存的就是 diff 的内容。还一直好奇它是怎样做到如此高效的提取和恢复两个文件的 diff 。简单了解时候才发现这种说法可对可不对。\n\ngit 其实可以理解为是一个 K-V 数据库。\n\n没错 git 存贮的就是许许多多的 K-V 对。\n\nK 就是根据文件内容计算出来的哈希值。V 就是 加入描述性文本经 zlib 压缩后的文件内容。根据哈希的特性，只要文件内容发生了改变，那它的哈希值就会发生变化，从而 git 也就可以监测到文件的变化。\n\nK-V 是一种很神奇的结构，它表示了一种关系。它可以给两个原本可能互不相干的东西建立一种联系。而各种各样组织数据的方式都离不开这种联系。某种程度上可以把 key 看作指针，指向某个特定的内容。\n\n简单的讲，以上就是我所认识的 git 的全部。\n\n## 具体解释\n\n每一个 git 项目都有一个神奇的 .git 目录。这个目录里存储了 git 工作所需要的资料。刚刚我讲到 git 就是一个 K-V 数据库，而数据库的内容大部分都保存在 .git 目录下的 objects 文件夹中。\n\n{% asset_img image-20191022100218849.png img %}\n\n在这个文件夹中，会看到很多类似 1a、5b 一类的文件夹，文件夹里又是长长的看上去无意义的数字和字母的组合。其实这里涉及到一个很关键的概念，每个文件和它所在的文件夹的名字就是根据文件内容经过哈希函数所得的值，也就是 K-V 数据库中的 key。而文件的内容理所应当的就是文件的内容了。当然是在添加了一定的描述性文本经 zlib 压缩之后的内容，所以直接打开之后也是不可读的。\n\n每一个文件都是一个对象。每一个对象都代表着一段内容的哈希值到内容的联系。\n\n而 git 就是工作在这样许许多多的对象所构成的联系之上的。\n\n### 底层命令\n\n除了之前熟悉的 pull push 这一类的上层命令接口，git 还有一套底层命令，能够对 git 进行更加深入灵活的控制。这篇文章中会较多的涉及到一些底层命令的使用，也会通过用底层命令实现上层接口功能的方式来使读者更加深刻的理解 git 上层命令。\n\n文中会用到的底层命令如下：\n\n1. git hash-object 用于将一段内容生成 blob 对象\n2. git cat-file 用于显示出对象的内容\n\n### blob\n\nblob 对象是基本对象之一。每一个 blob 对象都代表着项目中的一个文件夹在某一个时刻的完整快照。\n\n调用 **git hash-object** 命令可以把一个 stdin 输入的流或者是一个文件经过 git 的规则转化成 blob 对象存入库中。\n\n{% asset_img image-20191022162231775.png img %}\n\n--stdin 表示从 stdin 接受输入内容。-w 参数表示把生成的对象保存到数据库中。\n\n输出的一段字符就是 git 通过特定的哈希算法根据文本内容所计算出的 hash code。也可理解为该 blob 对象的 key。\n\n可以通过 **git cat-file** 命令来验证我们的结果\n\n{% asset_img image-20191022162711988.png img %}\n\n-p 参数会输出对象的内容， -t 参数会输出对象的类型。由此可见我们刚刚通过 git 底层命令生成了一个 blob 类型的对象，它的 key 的前五位为 45b98，内容为 hi\n\n### tree\n\n简单来说可以把 blob 看作文件内容，但是可以想象，我们日常使用的文件系统都是树形结构，一个文件夹内可能还有多个文件夹或者多个文件。\n\n{% asset_img image-20191022164648393.png img %}\n\n如果说 blob 对应文件，那么 tree 对象可以理解为一个文件夹的角色，把文件组成文件系统。值得一提的是，一个文件的文件名是保存在 tree 对象中的，而不是 blob 对象中。\n\n{% asset_img data-model-1.png img %}\n\n通过 tree 对象和 blob 对象，git 便可以建立一个文件目录所需要的关联了。\n\ntree 对象的创建一般不像 blob 那样随意，往往要根据当前暂存区的状态生成一个 tree 对象。\n\n所以为了创建一个 tree 对象，我们要先创建一个暂存区。\n\n{% asset_img image-20191022170637922.png img %}\n\ngit update-index 命令可以创建一个暂存区，--add 参数表示将对象添加到暂存区，--cacheinfo 指示该对象来自对象库，100644 是文件模式，表示该文件为普通文件。最后一个参数指示该对象的名字。\n\n接下来就可以通过 git write-tree 命令产生一个 tree 对象并且写入对象库\n\n{% asset_img image-20191022171731843.png img %}\n\n可见我们创建了一个 tree 对象。并且有一个叫 test.file 的文件，且其 hash code 和我们之前的 hash code 一样。\n\n{% asset_img image-20191022171907654.png img %}\n\n### commit\n\n\n\n\n\n","slug":"git-internal","published":1,"updated":"2019-12-11T13:13:49.662Z","_id":"ck41b8arh0000xs86532rej8r","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"WIP\"><a href=\"#WIP\" class=\"headerlink\" title=\"WIP\"></a>WIP</h2><p>还隐约记得当时第一次接触 git 时的场景。用一脸懵逼形容没有一点不妥。光是区分 git 和 github 的联系和区别就用了很久。看到一堆的命令也是感觉陌生而又头疼。对 Android Studio 提供的图形工具也是爱不释手。</p>\n<p>直到现在，也敲了很多命令，也使用 git 做了一些工作，又翻了一下 git 官方文档，才意识到了自己的成长。</p>\n<p>该文章写给初学者，但是为了不过多的停留在细节的东西，假设读者对命令行的工作方式有一定的认识，对 git 的功能有一定的了解，且假设读者对 Linux/Unix 有一定的认识。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"初见\"><a href=\"#初见\" class=\"headerlink\" title=\"初见\"></a>初见</h1><p>我不知道大家在第一次使用 git 的时候是什么心理。但我当时一定是满头大汗自顾不暇的。沉迷于各种教程，却还是难得精髓。</p>\n<p>直到逐渐有了一点实践经验，才得空可以思考 git 是怎样做到这非常神奇的功能的。</p>\n<p>又翻开了 git 官方文档 <a href=\"[https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-%E5%BA%95%E5%B1%82%E5%91%BD%E4%BB%A4%E5%92%8C%E9%AB%98%E5%B1%82%E5%91%BD%E4%BB%A4](https://git-scm.com/book/zh/v2/Git-内部原理-底层命令和高层命令)\">git 文档</a> ，却有了完全不同的体验。发现了很多好玩的东西，有趣的干货。这部分内容就不在此赘述，之后可以再写一篇。本文的重心放在 git 内部原理上。</p>\n<h1 id=\"正戏\"><a href=\"#正戏\" class=\"headerlink\" title=\"正戏\"></a>正戏</h1><h2 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h2><p>受到 git diff 的影响，其实我一直认为 git 保存的就是 diff 的内容。还一直好奇它是怎样做到如此高效的提取和恢复两个文件的 diff 。简单了解时候才发现这种说法可对可不对。</p>\n<p>git 其实可以理解为是一个 K-V 数据库。</p>\n<p>没错 git 存贮的就是许许多多的 K-V 对。</p>\n<p>K 就是根据文件内容计算出来的哈希值。V 就是 加入描述性文本经 zlib 压缩后的文件内容。根据哈希的特性，只要文件内容发生了改变，那它的哈希值就会发生变化，从而 git 也就可以监测到文件的变化。</p>\n<p>K-V 是一种很神奇的结构，它表示了一种关系。它可以给两个原本可能互不相干的东西建立一种联系。而各种各样组织数据的方式都离不开这种联系。某种程度上可以把 key 看作指针，指向某个特定的内容。</p>\n<p>简单的讲，以上就是我所认识的 git 的全部。</p>\n<h2 id=\"具体解释\"><a href=\"#具体解释\" class=\"headerlink\" title=\"具体解释\"></a>具体解释</h2><p>每一个 git 项目都有一个神奇的 .git 目录。这个目录里存储了 git 工作所需要的资料。刚刚我讲到 git 就是一个 K-V 数据库，而数据库的内容大部分都保存在 .git 目录下的 objects 文件夹中。</p>\n<img data-src=\"/2019/10/17/git-internal/image-20191022100218849.png\" class=\"\" title=\"img\">\n\n<p>在这个文件夹中，会看到很多类似 1a、5b 一类的文件夹，文件夹里又是长长的看上去无意义的数字和字母的组合。其实这里涉及到一个很关键的概念，每个文件和它所在的文件夹的名字就是根据文件内容经过哈希函数所得的值，也就是 K-V 数据库中的 key。而文件的内容理所应当的就是文件的内容了。当然是在添加了一定的描述性文本经 zlib 压缩之后的内容，所以直接打开之后也是不可读的。</p>\n<p>每一个文件都是一个对象。每一个对象都代表着一段内容的哈希值到内容的联系。</p>\n<p>而 git 就是工作在这样许许多多的对象所构成的联系之上的。</p>\n<h3 id=\"底层命令\"><a href=\"#底层命令\" class=\"headerlink\" title=\"底层命令\"></a>底层命令</h3><p>除了之前熟悉的 pull push 这一类的上层命令接口，git 还有一套底层命令，能够对 git 进行更加深入灵活的控制。这篇文章中会较多的涉及到一些底层命令的使用，也会通过用底层命令实现上层接口功能的方式来使读者更加深刻的理解 git 上层命令。</p>\n<p>文中会用到的底层命令如下：</p>\n<ol>\n<li>git hash-object 用于将一段内容生成 blob 对象</li>\n<li>git cat-file 用于显示出对象的内容</li>\n</ol>\n<h3 id=\"blob\"><a href=\"#blob\" class=\"headerlink\" title=\"blob\"></a>blob</h3><p>blob 对象是基本对象之一。每一个 blob 对象都代表着项目中的一个文件夹在某一个时刻的完整快照。</p>\n<p>调用 <strong>git hash-object</strong> 命令可以把一个 stdin 输入的流或者是一个文件经过 git 的规则转化成 blob 对象存入库中。</p>\n<img data-src=\"/2019/10/17/git-internal/image-20191022162231775.png\" class=\"\" title=\"img\">\n\n<p>–stdin 表示从 stdin 接受输入内容。-w 参数表示把生成的对象保存到数据库中。</p>\n<p>输出的一段字符就是 git 通过特定的哈希算法根据文本内容所计算出的 hash code。也可理解为该 blob 对象的 key。</p>\n<p>可以通过 <strong>git cat-file</strong> 命令来验证我们的结果</p>\n<img data-src=\"/2019/10/17/git-internal/image-20191022162711988.png\" class=\"\" title=\"img\">\n\n<p>-p 参数会输出对象的内容， -t 参数会输出对象的类型。由此可见我们刚刚通过 git 底层命令生成了一个 blob 类型的对象，它的 key 的前五位为 45b98，内容为 hi</p>\n<h3 id=\"tree\"><a href=\"#tree\" class=\"headerlink\" title=\"tree\"></a>tree</h3><p>简单来说可以把 blob 看作文件内容，但是可以想象，我们日常使用的文件系统都是树形结构，一个文件夹内可能还有多个文件夹或者多个文件。</p>\n<img data-src=\"/2019/10/17/git-internal/image-20191022164648393.png\" class=\"\" title=\"img\">\n\n<p>如果说 blob 对应文件，那么 tree 对象可以理解为一个文件夹的角色，把文件组成文件系统。值得一提的是，一个文件的文件名是保存在 tree 对象中的，而不是 blob 对象中。</p>\n<img data-src=\"/2019/10/17/git-internal/data-model-1.png\" class=\"\" title=\"img\">\n\n<p>通过 tree 对象和 blob 对象，git 便可以建立一个文件目录所需要的关联了。</p>\n<p>tree 对象的创建一般不像 blob 那样随意，往往要根据当前暂存区的状态生成一个 tree 对象。</p>\n<p>所以为了创建一个 tree 对象，我们要先创建一个暂存区。</p>\n<img data-src=\"/2019/10/17/git-internal/image-20191022170637922.png\" class=\"\" title=\"img\">\n\n<p>git update-index 命令可以创建一个暂存区，–add 参数表示将对象添加到暂存区，–cacheinfo 指示该对象来自对象库，100644 是文件模式，表示该文件为普通文件。最后一个参数指示该对象的名字。</p>\n<p>接下来就可以通过 git write-tree 命令产生一个 tree 对象并且写入对象库</p>\n<img data-src=\"/2019/10/17/git-internal/image-20191022171731843.png\" class=\"\" title=\"img\">\n\n<p>可见我们创建了一个 tree 对象。并且有一个叫 test.file 的文件，且其 hash code 和我们之前的 hash code 一样。</p>\n<img data-src=\"/2019/10/17/git-internal/image-20191022171907654.png\" class=\"\" title=\"img\">\n\n<h3 id=\"commit\"><a href=\"#commit\" class=\"headerlink\" title=\"commit\"></a>commit</h3>","site":{"data":{}},"excerpt":"<h2 id=\"WIP\"><a href=\"#WIP\" class=\"headerlink\" title=\"WIP\"></a>WIP</h2><p>还隐约记得当时第一次接触 git 时的场景。用一脸懵逼形容没有一点不妥。光是区分 git 和 github 的联系和区别就用了很久。看到一堆的命令也是感觉陌生而又头疼。对 Android Studio 提供的图形工具也是爱不释手。</p>\n<p>直到现在，也敲了很多命令，也使用 git 做了一些工作，又翻了一下 git 官方文档，才意识到了自己的成长。</p>\n<p>该文章写给初学者，但是为了不过多的停留在细节的东西，假设读者对命令行的工作方式有一定的认识，对 git 的功能有一定的了解，且假设读者对 Linux/Unix 有一定的认识。</p>","more":"<h1 id=\"初见\"><a href=\"#初见\" class=\"headerlink\" title=\"初见\"></a>初见</h1><p>我不知道大家在第一次使用 git 的时候是什么心理。但我当时一定是满头大汗自顾不暇的。沉迷于各种教程，却还是难得精髓。</p>\n<p>直到逐渐有了一点实践经验，才得空可以思考 git 是怎样做到这非常神奇的功能的。</p>\n<p>又翻开了 git 官方文档 <a href=\"[https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-%E5%BA%95%E5%B1%82%E5%91%BD%E4%BB%A4%E5%92%8C%E9%AB%98%E5%B1%82%E5%91%BD%E4%BB%A4](https://git-scm.com/book/zh/v2/Git-内部原理-底层命令和高层命令)\">git 文档</a> ，却有了完全不同的体验。发现了很多好玩的东西，有趣的干货。这部分内容就不在此赘述，之后可以再写一篇。本文的重心放在 git 内部原理上。</p>\n<h1 id=\"正戏\"><a href=\"#正戏\" class=\"headerlink\" title=\"正戏\"></a>正戏</h1><h2 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h2><p>受到 git diff 的影响，其实我一直认为 git 保存的就是 diff 的内容。还一直好奇它是怎样做到如此高效的提取和恢复两个文件的 diff 。简单了解时候才发现这种说法可对可不对。</p>\n<p>git 其实可以理解为是一个 K-V 数据库。</p>\n<p>没错 git 存贮的就是许许多多的 K-V 对。</p>\n<p>K 就是根据文件内容计算出来的哈希值。V 就是 加入描述性文本经 zlib 压缩后的文件内容。根据哈希的特性，只要文件内容发生了改变，那它的哈希值就会发生变化，从而 git 也就可以监测到文件的变化。</p>\n<p>K-V 是一种很神奇的结构，它表示了一种关系。它可以给两个原本可能互不相干的东西建立一种联系。而各种各样组织数据的方式都离不开这种联系。某种程度上可以把 key 看作指针，指向某个特定的内容。</p>\n<p>简单的讲，以上就是我所认识的 git 的全部。</p>\n<h2 id=\"具体解释\"><a href=\"#具体解释\" class=\"headerlink\" title=\"具体解释\"></a>具体解释</h2><p>每一个 git 项目都有一个神奇的 .git 目录。这个目录里存储了 git 工作所需要的资料。刚刚我讲到 git 就是一个 K-V 数据库，而数据库的内容大部分都保存在 .git 目录下的 objects 文件夹中。</p>\n<img data-src=\"/2019/10/17/git-internal/image-20191022100218849.png\" class=\"\" title=\"img\">\n\n<p>在这个文件夹中，会看到很多类似 1a、5b 一类的文件夹，文件夹里又是长长的看上去无意义的数字和字母的组合。其实这里涉及到一个很关键的概念，每个文件和它所在的文件夹的名字就是根据文件内容经过哈希函数所得的值，也就是 K-V 数据库中的 key。而文件的内容理所应当的就是文件的内容了。当然是在添加了一定的描述性文本经 zlib 压缩之后的内容，所以直接打开之后也是不可读的。</p>\n<p>每一个文件都是一个对象。每一个对象都代表着一段内容的哈希值到内容的联系。</p>\n<p>而 git 就是工作在这样许许多多的对象所构成的联系之上的。</p>\n<h3 id=\"底层命令\"><a href=\"#底层命令\" class=\"headerlink\" title=\"底层命令\"></a>底层命令</h3><p>除了之前熟悉的 pull push 这一类的上层命令接口，git 还有一套底层命令，能够对 git 进行更加深入灵活的控制。这篇文章中会较多的涉及到一些底层命令的使用，也会通过用底层命令实现上层接口功能的方式来使读者更加深刻的理解 git 上层命令。</p>\n<p>文中会用到的底层命令如下：</p>\n<ol>\n<li>git hash-object 用于将一段内容生成 blob 对象</li>\n<li>git cat-file 用于显示出对象的内容</li>\n</ol>\n<h3 id=\"blob\"><a href=\"#blob\" class=\"headerlink\" title=\"blob\"></a>blob</h3><p>blob 对象是基本对象之一。每一个 blob 对象都代表着项目中的一个文件夹在某一个时刻的完整快照。</p>\n<p>调用 <strong>git hash-object</strong> 命令可以把一个 stdin 输入的流或者是一个文件经过 git 的规则转化成 blob 对象存入库中。</p>\n<img data-src=\"/2019/10/17/git-internal/image-20191022162231775.png\" class=\"\" title=\"img\">\n\n<p>–stdin 表示从 stdin 接受输入内容。-w 参数表示把生成的对象保存到数据库中。</p>\n<p>输出的一段字符就是 git 通过特定的哈希算法根据文本内容所计算出的 hash code。也可理解为该 blob 对象的 key。</p>\n<p>可以通过 <strong>git cat-file</strong> 命令来验证我们的结果</p>\n<img data-src=\"/2019/10/17/git-internal/image-20191022162711988.png\" class=\"\" title=\"img\">\n\n<p>-p 参数会输出对象的内容， -t 参数会输出对象的类型。由此可见我们刚刚通过 git 底层命令生成了一个 blob 类型的对象，它的 key 的前五位为 45b98，内容为 hi</p>\n<h3 id=\"tree\"><a href=\"#tree\" class=\"headerlink\" title=\"tree\"></a>tree</h3><p>简单来说可以把 blob 看作文件内容，但是可以想象，我们日常使用的文件系统都是树形结构，一个文件夹内可能还有多个文件夹或者多个文件。</p>\n<img data-src=\"/2019/10/17/git-internal/image-20191022164648393.png\" class=\"\" title=\"img\">\n\n<p>如果说 blob 对应文件，那么 tree 对象可以理解为一个文件夹的角色，把文件组成文件系统。值得一提的是，一个文件的文件名是保存在 tree 对象中的，而不是 blob 对象中。</p>\n<img data-src=\"/2019/10/17/git-internal/data-model-1.png\" class=\"\" title=\"img\">\n\n<p>通过 tree 对象和 blob 对象，git 便可以建立一个文件目录所需要的关联了。</p>\n<p>tree 对象的创建一般不像 blob 那样随意，往往要根据当前暂存区的状态生成一个 tree 对象。</p>\n<p>所以为了创建一个 tree 对象，我们要先创建一个暂存区。</p>\n<img data-src=\"/2019/10/17/git-internal/image-20191022170637922.png\" class=\"\" title=\"img\">\n\n<p>git update-index 命令可以创建一个暂存区，–add 参数表示将对象添加到暂存区，–cacheinfo 指示该对象来自对象库，100644 是文件模式，表示该文件为普通文件。最后一个参数指示该对象的名字。</p>\n<p>接下来就可以通过 git write-tree 命令产生一个 tree 对象并且写入对象库</p>\n<img data-src=\"/2019/10/17/git-internal/image-20191022171731843.png\" class=\"\" title=\"img\">\n\n<p>可见我们创建了一个 tree 对象。并且有一个叫 test.file 的文件，且其 hash code 和我们之前的 hash code 一样。</p>\n<img data-src=\"/2019/10/17/git-internal/image-20191022171907654.png\" class=\"\" title=\"img\">\n\n<h3 id=\"commit\"><a href=\"#commit\" class=\"headerlink\" title=\"commit\"></a>commit</h3>"},{"title":"如何完成一个简单的玩具编译器（flex+bison+LLVM）","date":"2019-12-10T06:49:55.000Z","_content":"\n## WIP\n\n## 背景\n\n这学期开了编译技术的课，课设就是做一个小型编译器。做的过程中有很多收获，也踩了不少坑。故而简单记录一下一个可以生成目标代码的玩具编译器所需要的过程。\n\n<!-- more -->\n\n## HELLO-C 介绍\n\n### 前言\n\n因为时间紧任务重，课设时间不到一个月，还有各种其他作业考试和项目，故而只能坚持一个原则——简单粗暴\n\n走一遍流程，稳快好的搞定一个玩具编译器。\n\n从定义文法开始，坚持不挖坑的原则，尽量避开能想到的坑。\n\n制作过程糙快猛，不追求细节的尽善尽美，但还是要保证底线。\n\n保证代码规范，保证模块间依赖清晰，尽量不犯蠢。\n\n一些细节会被忽略，比如不考虑内存泄露，只污染不治理。\n\n**特别提醒！该说明只是简单记录过程，不是 Step By Step 的教程。**\n\n**使用 Flex + Bison + LLVM + C 完成编译器**\n\n### 前置要求\n\n1. Linux/OSX 下构建，不考虑 Windows，不会详细描述环境的搭建过程\n2. 了解简单的命令\n3. 对 CMake、MakeFile 有一定了解\n4. 对 C/C++ 有一定了解\n5. Flex/Bison 的使用请善用搜索引擎\n\n### 语法\n\n{% asset_img image-20191128234753437.png img %}\n\n大体采用 C 风格。\n\n为了简单，一个源文件由三部分组成。\n\n1. struct 定义。struct 内只能有基本类型，int float 和 char\n2. 全局变量定义\n3. 函数定义\n\n```c\nstruct A {\n  int a;\n  float b;\n}\n\nint c;\n\nvoid fun(int d, int f) {\n  int h;\n  float g;\n  A stru;\n  int [d + 1][f * 2] array;\n  h = 0;\n  g = 2.0;\n  stru.a = -1;\n  if (a == 0) {\n    h = 1;\n  } else {\n    while (h > 0) {\n    \tg++;\n      break;\n      continue;\n    }\n  }\n  return 0;\n}\n```\n\n不考虑逻辑正确性，给出一个程序示例。以上便是支持的全部语法。\n\n**注意：为了简单~~懒~~，声明归声明，赋值归赋值，变量声明的同时不能初始化。默认初始化为 0**\n\n（因为支持数组，我在考虑要不要加入对 for 的支持）\n\n语法检查时数组只检测维度，不检查是否越界。\n\n（感觉支持动态数组又是一个大坑… 大不了 malloc 了事）\n\n为了避免逃逸分析，没有显式引入指针。也就是所有的临时变量都是栈上变量（array 可能例外，暂时还没实现到 array）函数调用都是传拷贝。全局变量存储在堆空间。\n\n支持递归\n\n函数体由 stm 组成。\n\n这也是与 c 有一定差异的地方。stm 无值，exp 有值。\n\nif/while 的 test 块为 exp。\n\nstm：\n\n1. 赋值 stm 即 a = exp；\n2. 变量声明 int a;\n3. if/while\n4. break/continue/return\n\nexp：\n\n1. 函数调用 fun(1, 9);\n2. 单目运算\n3. 双目运算\n4. 右值（左值 + 常量）\n\n左值有三种\n\n1. 简单变量引用\n2. 结构体变量引用\n3. 数组引用\n\n## 编译器结构（C 项目结构）\n\n作为一名 Java 程序员…对 C 项目的组织经验确实不多。\n\n之前对于依赖管理等等可以说是一无所知乱完全乱搞。\n\n所幸之前看过一点虎书，虎书所用的管理方式虽然存在一点问题，但是相对还是比较清晰的。这次大体上采用虎书的项目规范。\n\n1. 头文件内不 include（理论上头文件应该自洽，但是不想写 ifndef 这一套，就简单的不在头文件内 include 了）\n2. struct 命名 M_xxxx_ M 为模块的简称，比如 AST 模块为 A。xxxx 采用小驼峰。最后要加一个下划线\n3. typedef M_xxxx_ * M_xxxx 在来个 typedef，写起来方便一点\n4. 结构体构造函数为  xxxx 的大驼峰。\n5. 其余按照 Java 规范来。大括号不换行。\n\n构建系统使用 CMake。\n\n## 词法分析 & 语法分析\n\n对于我们的编译器来说，输入的是一个源文件，也可以简单的理解为是字符的组合。但是如果整个编译过程中操作的都是字符串的话，那未免太过复杂。所以要对源文件经过某些预处理。就像做饭一样，要先把食材洗净切好，分门别类的摆好再开始。而词法分析和语法分析就是类似于这样的步骤。\n\n当然和切菜不同，词法分析和语法分析更多的是一个规约的过程，就是把某种零散的元素规约整理成联系更加紧密的结构。\n\n### 词法分析\n\n```c\nint fun(int b) {\n\tint a = 0;\n  a += 5;\n  return a;\n}\n```\n\n看这段简单的程序，可以说它是一个函数。\n\n这个函数又由返回值类型、函数名、参数表和函数体组成。\n\n继续细化的话可以说每一个部分都由一个或多个词组成。也就是所谓的 TOKEN。我们真正关心的不是 int 由 i、n 和 t 组成，而是 int 这个词所代表的含义。\n\n这就是词法分析的工作，从源文件中提取出一个一个的词，以简化后续的工作。\n\n比如这段代码经过词法分析之后的输出可能是 \n\n```\nID ID LPAREN ID ID RPAREN LBRACE\nID ID ASSIGN INT SEMICOLON\n\t\t\t\t....\n```\n\n这样我们下一步工作的处理单位就从字符变成了 TOKEN。\n\n对于 TKOEN 的提取可以采用正则表达式来完成，关于正则表达式的内容可以查阅相关资料。\n\n这里采用 FLEX 来做词法分析。FLEX 会根据我们所制定的规则生成一个自动机，它会在每次调用 yylex 函数时候返回 yyin 中下一个匹配到某条规则所对应的 TOKEN ID… \n\n### 语法分析\n\n每种语言都有其对应的文法，也就是其 TOKEN 组成的规则。\n\n比如如果出现这样的 TOKEN 序列，我们可以说这可能是一个声明\n\n``` \nID ID (int a)\n```\n\n但如果出现这样的序列，我们就无法将其对应到某条规则\n\n```\nID ID ID\n```\n\n而语法分析就是将 TOKEN 规约成符合文法的结构。一般为抽象语法树 (Abstract Syntax Tree)\n\n{% asset_img image-20191206143822656.png img %}\n\n需要注意的是我们词法分析产生的 AST 是不考虑语义内容的，只考虑语法内容。也就是下边的表述在语法分析中是符合规则并且可以生成 AST 的。\n\n```\nint a;\na = 1.1;// 虽然把 float 赋值给 int 型变量，但是是符合文法的\n```\n\n但是下边的表述是不符合语法的\n\n```\nint a,\na = 1, // 一个语句的结束应该是 ';' 而不是 ','\n```\n\n和词法分析类似，我们使用 Bison 来生成语法分析器。\n\n### 有限状态自动机\n\n词法分析和语法分析是状态机非常典型的应用。\n\n我所理解的状态机简单来说主要由两部分组成，一部分是状态，另一部分是状态间转化的规则。\n\n当状态机处于某个状态，收到某种输入时，它就跳转到另一个状态，同时执行某些特定的操作。\n\n## 语义分析\n\n语义分析就是一个静态检查的过程。就如刚才提到的，有很多满足文法的表述其实是不合法的。语义分析就是找到一部分这样的错误。比如把一个浮点数赋值给一个 int 类型的变量，这样的异常是可以在语义检查中发现的。\n\n## 符号表\n\n程序的合法性要建立在一定的上下文中。而符号表就是及其重要的上下文之一。\n\n比如\n\n``` c\nvoid fun1() {\n\tint a;\n  a = 1; // 合法\n \tb = 2; // 不合法\n}\n\nvoid fun2() {\n  int a;\n  int b;\n  a = 1; // 合法\n  b = 2; // 合法\n}\n```\n\nb = 2 的语句在 fun1 中就是不合法的。因为其上下文中没有定义 b 的符号。\n\n我们把上下文的符号记录在一个叫符号表的结构里。\n\n分析实现符号表的需求：\n\n1. 因为有很多查询的过程，所以符号表的查询性能要好\n2. 符号上下文在变化，所以符号表应该有添加和删除的能力\n3. 符号有作用域，符号表要控制符号的作用域\n\n综合以上，对于第一条，哈希表无疑是最佳选择之一。\n\n对于第二三条，栈显然是非常好的选择。\n\n故而符号表的存储结构靠哈希表来实现，以达到常数复杂度的查询性能。\n\n同时加入辅助指针，以保持栈的结构。\n\n{% asset_img image-20191206150718592.png img %}\n\n大概是这样的结构。可以通过 hash 快速查找到对应的 node，同时也保证了栈的顺序。 top 指针即栈顶。具体的结构定义可查阅项目源代码的 include/table.h\n\n## LLVM C Interface\n\n代码生成采用 LLVM 来做，而写这篇说明最直接的原因就是我在 LLVM 的使用上遇到了一些问题。\n\nLLVM 提供了很多接口，使用更为广泛的应该是 C++ 接口。但是我因为不想~~不会~~写 C++，故而决定通过 C 接口来使用 LLVM。这也是坑的开始…\n\nC 接口其实是 C++ 接口的封装，故而有一些没有封装的 API 用起来就比较难受了…\n\n其次 C 接口的文档并不是很完善，也没有什么注释，很多用法还是要回到被封装的 C++ 接口找答案。\n\n同时 C 接口的 Demo 也很少，似乎用的人不是很多…\n\n综上，建议直接使用 C++ 接口…\n\n但是… 就玩具的需求来说，C 接口已经足够了。写这篇文章就是为了总结一下 C 接口简单的使用 hhh。\n\n### SSA\n\n[SSA WiKi](https://en.wikipedia.org/wiki/Static_single_assignment_form)\n\n### global variables\n\n{% asset_img image-20191202110013586.png img %}\n\n{% asset_img image-20191202110131130.png img %}\n\n[GEP](https://llvm.org/docs/GetElementPtr.html)\n\n","source":"_posts/helloc-cookbook.md","raw":"---\ntitle: 如何完成一个简单的玩具编译器（flex+bison+LLVM）\ndate: 2019-12-10 14:49:55\ntags: compile\n\n---\n\n## WIP\n\n## 背景\n\n这学期开了编译技术的课，课设就是做一个小型编译器。做的过程中有很多收获，也踩了不少坑。故而简单记录一下一个可以生成目标代码的玩具编译器所需要的过程。\n\n<!-- more -->\n\n## HELLO-C 介绍\n\n### 前言\n\n因为时间紧任务重，课设时间不到一个月，还有各种其他作业考试和项目，故而只能坚持一个原则——简单粗暴\n\n走一遍流程，稳快好的搞定一个玩具编译器。\n\n从定义文法开始，坚持不挖坑的原则，尽量避开能想到的坑。\n\n制作过程糙快猛，不追求细节的尽善尽美，但还是要保证底线。\n\n保证代码规范，保证模块间依赖清晰，尽量不犯蠢。\n\n一些细节会被忽略，比如不考虑内存泄露，只污染不治理。\n\n**特别提醒！该说明只是简单记录过程，不是 Step By Step 的教程。**\n\n**使用 Flex + Bison + LLVM + C 完成编译器**\n\n### 前置要求\n\n1. Linux/OSX 下构建，不考虑 Windows，不会详细描述环境的搭建过程\n2. 了解简单的命令\n3. 对 CMake、MakeFile 有一定了解\n4. 对 C/C++ 有一定了解\n5. Flex/Bison 的使用请善用搜索引擎\n\n### 语法\n\n{% asset_img image-20191128234753437.png img %}\n\n大体采用 C 风格。\n\n为了简单，一个源文件由三部分组成。\n\n1. struct 定义。struct 内只能有基本类型，int float 和 char\n2. 全局变量定义\n3. 函数定义\n\n```c\nstruct A {\n  int a;\n  float b;\n}\n\nint c;\n\nvoid fun(int d, int f) {\n  int h;\n  float g;\n  A stru;\n  int [d + 1][f * 2] array;\n  h = 0;\n  g = 2.0;\n  stru.a = -1;\n  if (a == 0) {\n    h = 1;\n  } else {\n    while (h > 0) {\n    \tg++;\n      break;\n      continue;\n    }\n  }\n  return 0;\n}\n```\n\n不考虑逻辑正确性，给出一个程序示例。以上便是支持的全部语法。\n\n**注意：为了简单~~懒~~，声明归声明，赋值归赋值，变量声明的同时不能初始化。默认初始化为 0**\n\n（因为支持数组，我在考虑要不要加入对 for 的支持）\n\n语法检查时数组只检测维度，不检查是否越界。\n\n（感觉支持动态数组又是一个大坑… 大不了 malloc 了事）\n\n为了避免逃逸分析，没有显式引入指针。也就是所有的临时变量都是栈上变量（array 可能例外，暂时还没实现到 array）函数调用都是传拷贝。全局变量存储在堆空间。\n\n支持递归\n\n函数体由 stm 组成。\n\n这也是与 c 有一定差异的地方。stm 无值，exp 有值。\n\nif/while 的 test 块为 exp。\n\nstm：\n\n1. 赋值 stm 即 a = exp；\n2. 变量声明 int a;\n3. if/while\n4. break/continue/return\n\nexp：\n\n1. 函数调用 fun(1, 9);\n2. 单目运算\n3. 双目运算\n4. 右值（左值 + 常量）\n\n左值有三种\n\n1. 简单变量引用\n2. 结构体变量引用\n3. 数组引用\n\n## 编译器结构（C 项目结构）\n\n作为一名 Java 程序员…对 C 项目的组织经验确实不多。\n\n之前对于依赖管理等等可以说是一无所知乱完全乱搞。\n\n所幸之前看过一点虎书，虎书所用的管理方式虽然存在一点问题，但是相对还是比较清晰的。这次大体上采用虎书的项目规范。\n\n1. 头文件内不 include（理论上头文件应该自洽，但是不想写 ifndef 这一套，就简单的不在头文件内 include 了）\n2. struct 命名 M_xxxx_ M 为模块的简称，比如 AST 模块为 A。xxxx 采用小驼峰。最后要加一个下划线\n3. typedef M_xxxx_ * M_xxxx 在来个 typedef，写起来方便一点\n4. 结构体构造函数为  xxxx 的大驼峰。\n5. 其余按照 Java 规范来。大括号不换行。\n\n构建系统使用 CMake。\n\n## 词法分析 & 语法分析\n\n对于我们的编译器来说，输入的是一个源文件，也可以简单的理解为是字符的组合。但是如果整个编译过程中操作的都是字符串的话，那未免太过复杂。所以要对源文件经过某些预处理。就像做饭一样，要先把食材洗净切好，分门别类的摆好再开始。而词法分析和语法分析就是类似于这样的步骤。\n\n当然和切菜不同，词法分析和语法分析更多的是一个规约的过程，就是把某种零散的元素规约整理成联系更加紧密的结构。\n\n### 词法分析\n\n```c\nint fun(int b) {\n\tint a = 0;\n  a += 5;\n  return a;\n}\n```\n\n看这段简单的程序，可以说它是一个函数。\n\n这个函数又由返回值类型、函数名、参数表和函数体组成。\n\n继续细化的话可以说每一个部分都由一个或多个词组成。也就是所谓的 TOKEN。我们真正关心的不是 int 由 i、n 和 t 组成，而是 int 这个词所代表的含义。\n\n这就是词法分析的工作，从源文件中提取出一个一个的词，以简化后续的工作。\n\n比如这段代码经过词法分析之后的输出可能是 \n\n```\nID ID LPAREN ID ID RPAREN LBRACE\nID ID ASSIGN INT SEMICOLON\n\t\t\t\t....\n```\n\n这样我们下一步工作的处理单位就从字符变成了 TOKEN。\n\n对于 TKOEN 的提取可以采用正则表达式来完成，关于正则表达式的内容可以查阅相关资料。\n\n这里采用 FLEX 来做词法分析。FLEX 会根据我们所制定的规则生成一个自动机，它会在每次调用 yylex 函数时候返回 yyin 中下一个匹配到某条规则所对应的 TOKEN ID… \n\n### 语法分析\n\n每种语言都有其对应的文法，也就是其 TOKEN 组成的规则。\n\n比如如果出现这样的 TOKEN 序列，我们可以说这可能是一个声明\n\n``` \nID ID (int a)\n```\n\n但如果出现这样的序列，我们就无法将其对应到某条规则\n\n```\nID ID ID\n```\n\n而语法分析就是将 TOKEN 规约成符合文法的结构。一般为抽象语法树 (Abstract Syntax Tree)\n\n{% asset_img image-20191206143822656.png img %}\n\n需要注意的是我们词法分析产生的 AST 是不考虑语义内容的，只考虑语法内容。也就是下边的表述在语法分析中是符合规则并且可以生成 AST 的。\n\n```\nint a;\na = 1.1;// 虽然把 float 赋值给 int 型变量，但是是符合文法的\n```\n\n但是下边的表述是不符合语法的\n\n```\nint a,\na = 1, // 一个语句的结束应该是 ';' 而不是 ','\n```\n\n和词法分析类似，我们使用 Bison 来生成语法分析器。\n\n### 有限状态自动机\n\n词法分析和语法分析是状态机非常典型的应用。\n\n我所理解的状态机简单来说主要由两部分组成，一部分是状态，另一部分是状态间转化的规则。\n\n当状态机处于某个状态，收到某种输入时，它就跳转到另一个状态，同时执行某些特定的操作。\n\n## 语义分析\n\n语义分析就是一个静态检查的过程。就如刚才提到的，有很多满足文法的表述其实是不合法的。语义分析就是找到一部分这样的错误。比如把一个浮点数赋值给一个 int 类型的变量，这样的异常是可以在语义检查中发现的。\n\n## 符号表\n\n程序的合法性要建立在一定的上下文中。而符号表就是及其重要的上下文之一。\n\n比如\n\n``` c\nvoid fun1() {\n\tint a;\n  a = 1; // 合法\n \tb = 2; // 不合法\n}\n\nvoid fun2() {\n  int a;\n  int b;\n  a = 1; // 合法\n  b = 2; // 合法\n}\n```\n\nb = 2 的语句在 fun1 中就是不合法的。因为其上下文中没有定义 b 的符号。\n\n我们把上下文的符号记录在一个叫符号表的结构里。\n\n分析实现符号表的需求：\n\n1. 因为有很多查询的过程，所以符号表的查询性能要好\n2. 符号上下文在变化，所以符号表应该有添加和删除的能力\n3. 符号有作用域，符号表要控制符号的作用域\n\n综合以上，对于第一条，哈希表无疑是最佳选择之一。\n\n对于第二三条，栈显然是非常好的选择。\n\n故而符号表的存储结构靠哈希表来实现，以达到常数复杂度的查询性能。\n\n同时加入辅助指针，以保持栈的结构。\n\n{% asset_img image-20191206150718592.png img %}\n\n大概是这样的结构。可以通过 hash 快速查找到对应的 node，同时也保证了栈的顺序。 top 指针即栈顶。具体的结构定义可查阅项目源代码的 include/table.h\n\n## LLVM C Interface\n\n代码生成采用 LLVM 来做，而写这篇说明最直接的原因就是我在 LLVM 的使用上遇到了一些问题。\n\nLLVM 提供了很多接口，使用更为广泛的应该是 C++ 接口。但是我因为不想~~不会~~写 C++，故而决定通过 C 接口来使用 LLVM。这也是坑的开始…\n\nC 接口其实是 C++ 接口的封装，故而有一些没有封装的 API 用起来就比较难受了…\n\n其次 C 接口的文档并不是很完善，也没有什么注释，很多用法还是要回到被封装的 C++ 接口找答案。\n\n同时 C 接口的 Demo 也很少，似乎用的人不是很多…\n\n综上，建议直接使用 C++ 接口…\n\n但是… 就玩具的需求来说，C 接口已经足够了。写这篇文章就是为了总结一下 C 接口简单的使用 hhh。\n\n### SSA\n\n[SSA WiKi](https://en.wikipedia.org/wiki/Static_single_assignment_form)\n\n### global variables\n\n{% asset_img image-20191202110013586.png img %}\n\n{% asset_img image-20191202110131130.png img %}\n\n[GEP](https://llvm.org/docs/GetElementPtr.html)\n\n","slug":"helloc-cookbook","published":1,"updated":"2019-12-11T12:59:45.790Z","_id":"ck41b8arl0001xs864scv2nn3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"WIP\"><a href=\"#WIP\" class=\"headerlink\" title=\"WIP\"></a>WIP</h2><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>这学期开了编译技术的课，课设就是做一个小型编译器。做的过程中有很多收获，也踩了不少坑。故而简单记录一下一个可以生成目标代码的玩具编译器所需要的过程。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"HELLO-C-介绍\"><a href=\"#HELLO-C-介绍\" class=\"headerlink\" title=\"HELLO-C 介绍\"></a>HELLO-C 介绍</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>因为时间紧任务重，课设时间不到一个月，还有各种其他作业考试和项目，故而只能坚持一个原则——简单粗暴</p>\n<p>走一遍流程，稳快好的搞定一个玩具编译器。</p>\n<p>从定义文法开始，坚持不挖坑的原则，尽量避开能想到的坑。</p>\n<p>制作过程糙快猛，不追求细节的尽善尽美，但还是要保证底线。</p>\n<p>保证代码规范，保证模块间依赖清晰，尽量不犯蠢。</p>\n<p>一些细节会被忽略，比如不考虑内存泄露，只污染不治理。</p>\n<p><strong>特别提醒！该说明只是简单记录过程，不是 Step By Step 的教程。</strong></p>\n<p><strong>使用 Flex + Bison + LLVM + C 完成编译器</strong></p>\n<h3 id=\"前置要求\"><a href=\"#前置要求\" class=\"headerlink\" title=\"前置要求\"></a>前置要求</h3><ol>\n<li>Linux/OSX 下构建，不考虑 Windows，不会详细描述环境的搭建过程</li>\n<li>了解简单的命令</li>\n<li>对 CMake、MakeFile 有一定了解</li>\n<li>对 C/C++ 有一定了解</li>\n<li>Flex/Bison 的使用请善用搜索引擎</li>\n</ol>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3>\n\n<p>大体采用 C 风格。</p>\n<p>为了简单，一个源文件由三部分组成。</p>\n<ol>\n<li>struct 定义。struct 内只能有基本类型，int float 和 char</li>\n<li>全局变量定义</li>\n<li>函数定义</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A</span> &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">int</span> a;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">float</span> b;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> c;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">int</span> d, <span class=\"keyword\">int</span> f)</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">int</span> h;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">float</span> g;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  A stru;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">int</span> [d + <span class=\"number\">1</span>][f * <span class=\"number\">2</span>] <span class=\"built_in\">array</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  h = <span class=\"number\">0</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  g = <span class=\"number\">2.0</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  stru.a = <span class=\"number\">-1</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (a == <span class=\"number\">0</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    h = <span class=\"number\">1</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">while</span> (h &gt; <span class=\"number\">0</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \tg++;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">break</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">continue</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>不考虑逻辑正确性，给出一个程序示例。以上便是支持的全部语法。</p>\n<p><strong>注意：为了简单<del>懒</del>，声明归声明，赋值归赋值，变量声明的同时不能初始化。默认初始化为 0</strong></p>\n<p>（因为支持数组，我在考虑要不要加入对 for 的支持）</p>\n<p>语法检查时数组只检测维度，不检查是否越界。</p>\n<p>（感觉支持动态数组又是一个大坑… 大不了 malloc 了事）</p>\n<p>为了避免逃逸分析，没有显式引入指针。也就是所有的临时变量都是栈上变量（array 可能例外，暂时还没实现到 array）函数调用都是传拷贝。全局变量存储在堆空间。</p>\n<p>支持递归</p>\n<p>函数体由 stm 组成。</p>\n<p>这也是与 c 有一定差异的地方。stm 无值，exp 有值。</p>\n<p>if/while 的 test 块为 exp。</p>\n<p>stm：</p>\n<ol>\n<li>赋值 stm 即 a = exp；</li>\n<li>变量声明 int a;</li>\n<li>if/while</li>\n<li>break/continue/return</li>\n</ol>\n<p>exp：</p>\n<ol>\n<li>函数调用 fun(1, 9);</li>\n<li>单目运算</li>\n<li>双目运算</li>\n<li>右值（左值 + 常量）</li>\n</ol>\n<p>左值有三种</p>\n<ol>\n<li>简单变量引用</li>\n<li>结构体变量引用</li>\n<li>数组引用</li>\n</ol>\n<h2 id=\"编译器结构（C-项目结构）\"><a href=\"#编译器结构（C-项目结构）\" class=\"headerlink\" title=\"编译器结构（C 项目结构）\"></a>编译器结构（C 项目结构）</h2><p>作为一名 Java 程序员…对 C 项目的组织经验确实不多。</p>\n<p>之前对于依赖管理等等可以说是一无所知乱完全乱搞。</p>\n<p>所幸之前看过一点虎书，虎书所用的管理方式虽然存在一点问题，但是相对还是比较清晰的。这次大体上采用虎书的项目规范。</p>\n<ol>\n<li>头文件内不 include（理论上头文件应该自洽，但是不想写 ifndef 这一套，就简单的不在头文件内 include 了）</li>\n<li>struct 命名 M_xxxx_ M 为模块的简称，比如 AST 模块为 A。xxxx 采用小驼峰。最后要加一个下划线</li>\n<li>typedef M_xxxx_ * M_xxxx 在来个 typedef，写起来方便一点</li>\n<li>结构体构造函数为  xxxx 的大驼峰。</li>\n<li>其余按照 Java 规范来。大括号不换行。</li>\n</ol>\n<p>构建系统使用 CMake。</p>\n<h2 id=\"词法分析-amp-语法分析\"><a href=\"#词法分析-amp-语法分析\" class=\"headerlink\" title=\"词法分析 &amp; 语法分析\"></a>词法分析 &amp; 语法分析</h2><p>对于我们的编译器来说，输入的是一个源文件，也可以简单的理解为是字符的组合。但是如果整个编译过程中操作的都是字符串的话，那未免太过复杂。所以要对源文件经过某些预处理。就像做饭一样，要先把食材洗净切好，分门别类的摆好再开始。而词法分析和语法分析就是类似于这样的步骤。</p>\n<p>当然和切菜不同，词法分析和语法分析更多的是一个规约的过程，就是把某种零散的元素规约整理成联系更加紧密的结构。</p>\n<h3 id=\"词法分析\"><a href=\"#词法分析\" class=\"headerlink\" title=\"词法分析\"></a>词法分析</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  a += <span class=\"number\">5</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> a;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>看这段简单的程序，可以说它是一个函数。</p>\n<p>这个函数又由返回值类型、函数名、参数表和函数体组成。</p>\n<p>继续细化的话可以说每一个部分都由一个或多个词组成。也就是所谓的 TOKEN。我们真正关心的不是 int 由 i、n 和 t 组成，而是 int 这个词所代表的含义。</p>\n<p>这就是词法分析的工作，从源文件中提取出一个一个的词，以简化后续的工作。</p>\n<p>比如这段代码经过词法分析之后的输出可能是 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">ID ID LPAREN ID ID RPAREN LBRACE</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">ID ID ASSIGN INT SEMICOLON</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\t....</span></pre></td></tr></table></figure>\n\n<p>这样我们下一步工作的处理单位就从字符变成了 TOKEN。</p>\n<p>对于 TKOEN 的提取可以采用正则表达式来完成，关于正则表达式的内容可以查阅相关资料。</p>\n<p>这里采用 FLEX 来做词法分析。FLEX 会根据我们所制定的规则生成一个自动机，它会在每次调用 yylex 函数时候返回 yyin 中下一个匹配到某条规则所对应的 TOKEN ID… </p>\n<h3 id=\"语法分析\"><a href=\"#语法分析\" class=\"headerlink\" title=\"语法分析\"></a>语法分析</h3><p>每种语言都有其对应的文法，也就是其 TOKEN 组成的规则。</p>\n<p>比如如果出现这样的 TOKEN 序列，我们可以说这可能是一个声明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">ID ID (int a)</span></pre></td></tr></table></figure>\n\n<p>但如果出现这样的序列，我们就无法将其对应到某条规则</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">ID ID ID</span></pre></td></tr></table></figure>\n\n<p>而语法分析就是将 TOKEN 规约成符合文法的结构。一般为抽象语法树 (Abstract Syntax Tree)</p>\n\n\n<p>需要注意的是我们词法分析产生的 AST 是不考虑语义内容的，只考虑语法内容。也就是下边的表述在语法分析中是符合规则并且可以生成 AST 的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">int a;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">a &#x3D; 1.1;&#x2F;&#x2F; 虽然把 float 赋值给 int 型变量，但是是符合文法的</span></pre></td></tr></table></figure>\n\n<p>但是下边的表述是不符合语法的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">int a,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">a &#x3D; 1, &#x2F;&#x2F; 一个语句的结束应该是 &#39;;&#39; 而不是 &#39;,&#39;</span></pre></td></tr></table></figure>\n\n<p>和词法分析类似，我们使用 Bison 来生成语法分析器。</p>\n<h3 id=\"有限状态自动机\"><a href=\"#有限状态自动机\" class=\"headerlink\" title=\"有限状态自动机\"></a>有限状态自动机</h3><p>词法分析和语法分析是状态机非常典型的应用。</p>\n<p>我所理解的状态机简单来说主要由两部分组成，一部分是状态，另一部分是状态间转化的规则。</p>\n<p>当状态机处于某个状态，收到某种输入时，它就跳转到另一个状态，同时执行某些特定的操作。</p>\n<h2 id=\"语义分析\"><a href=\"#语义分析\" class=\"headerlink\" title=\"语义分析\"></a>语义分析</h2><p>语义分析就是一个静态检查的过程。就如刚才提到的，有很多满足文法的表述其实是不合法的。语义分析就是找到一部分这样的错误。比如把一个浮点数赋值给一个 int 类型的变量，这样的异常是可以在语义检查中发现的。</p>\n<h2 id=\"符号表\"><a href=\"#符号表\" class=\"headerlink\" title=\"符号表\"></a>符号表</h2><p>程序的合法性要建立在一定的上下文中。而符号表就是及其重要的上下文之一。</p>\n<p>比如</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun1</span><span class=\"params\">()</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">int</span> a;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  a = <span class=\"number\">1</span>; <span class=\"comment\">// 合法</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"> \tb = <span class=\"number\">2</span>; <span class=\"comment\">// 不合法</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun2</span><span class=\"params\">()</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">int</span> a;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">int</span> b;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  a = <span class=\"number\">1</span>; <span class=\"comment\">// 合法</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  b = <span class=\"number\">2</span>; <span class=\"comment\">// 合法</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>b = 2 的语句在 fun1 中就是不合法的。因为其上下文中没有定义 b 的符号。</p>\n<p>我们把上下文的符号记录在一个叫符号表的结构里。</p>\n<p>分析实现符号表的需求：</p>\n<ol>\n<li>因为有很多查询的过程，所以符号表的查询性能要好</li>\n<li>符号上下文在变化，所以符号表应该有添加和删除的能力</li>\n<li>符号有作用域，符号表要控制符号的作用域</li>\n</ol>\n<p>综合以上，对于第一条，哈希表无疑是最佳选择之一。</p>\n<p>对于第二三条，栈显然是非常好的选择。</p>\n<p>故而符号表的存储结构靠哈希表来实现，以达到常数复杂度的查询性能。</p>\n<p>同时加入辅助指针，以保持栈的结构。</p>\n\n\n<p>大概是这样的结构。可以通过 hash 快速查找到对应的 node，同时也保证了栈的顺序。 top 指针即栈顶。具体的结构定义可查阅项目源代码的 include/table.h</p>\n<h2 id=\"LLVM-C-Interface\"><a href=\"#LLVM-C-Interface\" class=\"headerlink\" title=\"LLVM C Interface\"></a>LLVM C Interface</h2><p>代码生成采用 LLVM 来做，而写这篇说明最直接的原因就是我在 LLVM 的使用上遇到了一些问题。</p>\n<p>LLVM 提供了很多接口，使用更为广泛的应该是 C++ 接口。但是我因为不想<del>不会</del>写 C++，故而决定通过 C 接口来使用 LLVM。这也是坑的开始…</p>\n<p>C 接口其实是 C++ 接口的封装，故而有一些没有封装的 API 用起来就比较难受了…</p>\n<p>其次 C 接口的文档并不是很完善，也没有什么注释，很多用法还是要回到被封装的 C++ 接口找答案。</p>\n<p>同时 C 接口的 Demo 也很少，似乎用的人不是很多…</p>\n<p>综上，建议直接使用 C++ 接口…</p>\n<p>但是… 就玩具的需求来说，C 接口已经足够了。写这篇文章就是为了总结一下 C 接口简单的使用 hhh。</p>\n<h3 id=\"SSA\"><a href=\"#SSA\" class=\"headerlink\" title=\"SSA\"></a>SSA</h3><p><a href=\"https://en.wikipedia.org/wiki/Static_single_assignment_form\" target=\"_blank\" rel=\"noopener\">SSA WiKi</a></p>\n<h3 id=\"global-variables\"><a href=\"#global-variables\" class=\"headerlink\" title=\"global variables\"></a>global variables</h3>\n\n\n\n<p><a href=\"https://llvm.org/docs/GetElementPtr.html\" target=\"_blank\" rel=\"noopener\">GEP</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"WIP\"><a href=\"#WIP\" class=\"headerlink\" title=\"WIP\"></a>WIP</h2><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>这学期开了编译技术的课，课设就是做一个小型编译器。做的过程中有很多收获，也踩了不少坑。故而简单记录一下一个可以生成目标代码的玩具编译器所需要的过程。</p>","more":"<h2 id=\"HELLO-C-介绍\"><a href=\"#HELLO-C-介绍\" class=\"headerlink\" title=\"HELLO-C 介绍\"></a>HELLO-C 介绍</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>因为时间紧任务重，课设时间不到一个月，还有各种其他作业考试和项目，故而只能坚持一个原则——简单粗暴</p>\n<p>走一遍流程，稳快好的搞定一个玩具编译器。</p>\n<p>从定义文法开始，坚持不挖坑的原则，尽量避开能想到的坑。</p>\n<p>制作过程糙快猛，不追求细节的尽善尽美，但还是要保证底线。</p>\n<p>保证代码规范，保证模块间依赖清晰，尽量不犯蠢。</p>\n<p>一些细节会被忽略，比如不考虑内存泄露，只污染不治理。</p>\n<p><strong>特别提醒！该说明只是简单记录过程，不是 Step By Step 的教程。</strong></p>\n<p><strong>使用 Flex + Bison + LLVM + C 完成编译器</strong></p>\n<h3 id=\"前置要求\"><a href=\"#前置要求\" class=\"headerlink\" title=\"前置要求\"></a>前置要求</h3><ol>\n<li>Linux/OSX 下构建，不考虑 Windows，不会详细描述环境的搭建过程</li>\n<li>了解简单的命令</li>\n<li>对 CMake、MakeFile 有一定了解</li>\n<li>对 C/C++ 有一定了解</li>\n<li>Flex/Bison 的使用请善用搜索引擎</li>\n</ol>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3>\n\n<p>大体采用 C 风格。</p>\n<p>为了简单，一个源文件由三部分组成。</p>\n<ol>\n<li>struct 定义。struct 内只能有基本类型，int float 和 char</li>\n<li>全局变量定义</li>\n<li>函数定义</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A</span> &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">int</span> a;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">float</span> b;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> c;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">int</span> d, <span class=\"keyword\">int</span> f)</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">int</span> h;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">float</span> g;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  A stru;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">int</span> [d + <span class=\"number\">1</span>][f * <span class=\"number\">2</span>] <span class=\"built_in\">array</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  h = <span class=\"number\">0</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  g = <span class=\"number\">2.0</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  stru.a = <span class=\"number\">-1</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (a == <span class=\"number\">0</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    h = <span class=\"number\">1</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">while</span> (h &gt; <span class=\"number\">0</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    \tg++;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">break</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">continue</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>不考虑逻辑正确性，给出一个程序示例。以上便是支持的全部语法。</p>\n<p><strong>注意：为了简单<del>懒</del>，声明归声明，赋值归赋值，变量声明的同时不能初始化。默认初始化为 0</strong></p>\n<p>（因为支持数组，我在考虑要不要加入对 for 的支持）</p>\n<p>语法检查时数组只检测维度，不检查是否越界。</p>\n<p>（感觉支持动态数组又是一个大坑… 大不了 malloc 了事）</p>\n<p>为了避免逃逸分析，没有显式引入指针。也就是所有的临时变量都是栈上变量（array 可能例外，暂时还没实现到 array）函数调用都是传拷贝。全局变量存储在堆空间。</p>\n<p>支持递归</p>\n<p>函数体由 stm 组成。</p>\n<p>这也是与 c 有一定差异的地方。stm 无值，exp 有值。</p>\n<p>if/while 的 test 块为 exp。</p>\n<p>stm：</p>\n<ol>\n<li>赋值 stm 即 a = exp；</li>\n<li>变量声明 int a;</li>\n<li>if/while</li>\n<li>break/continue/return</li>\n</ol>\n<p>exp：</p>\n<ol>\n<li>函数调用 fun(1, 9);</li>\n<li>单目运算</li>\n<li>双目运算</li>\n<li>右值（左值 + 常量）</li>\n</ol>\n<p>左值有三种</p>\n<ol>\n<li>简单变量引用</li>\n<li>结构体变量引用</li>\n<li>数组引用</li>\n</ol>\n<h2 id=\"编译器结构（C-项目结构）\"><a href=\"#编译器结构（C-项目结构）\" class=\"headerlink\" title=\"编译器结构（C 项目结构）\"></a>编译器结构（C 项目结构）</h2><p>作为一名 Java 程序员…对 C 项目的组织经验确实不多。</p>\n<p>之前对于依赖管理等等可以说是一无所知乱完全乱搞。</p>\n<p>所幸之前看过一点虎书，虎书所用的管理方式虽然存在一点问题，但是相对还是比较清晰的。这次大体上采用虎书的项目规范。</p>\n<ol>\n<li>头文件内不 include（理论上头文件应该自洽，但是不想写 ifndef 这一套，就简单的不在头文件内 include 了）</li>\n<li>struct 命名 M_xxxx_ M 为模块的简称，比如 AST 模块为 A。xxxx 采用小驼峰。最后要加一个下划线</li>\n<li>typedef M_xxxx_ * M_xxxx 在来个 typedef，写起来方便一点</li>\n<li>结构体构造函数为  xxxx 的大驼峰。</li>\n<li>其余按照 Java 规范来。大括号不换行。</li>\n</ol>\n<p>构建系统使用 CMake。</p>\n<h2 id=\"词法分析-amp-语法分析\"><a href=\"#词法分析-amp-语法分析\" class=\"headerlink\" title=\"词法分析 &amp; 语法分析\"></a>词法分析 &amp; 语法分析</h2><p>对于我们的编译器来说，输入的是一个源文件，也可以简单的理解为是字符的组合。但是如果整个编译过程中操作的都是字符串的话，那未免太过复杂。所以要对源文件经过某些预处理。就像做饭一样，要先把食材洗净切好，分门别类的摆好再开始。而词法分析和语法分析就是类似于这样的步骤。</p>\n<p>当然和切菜不同，词法分析和语法分析更多的是一个规约的过程，就是把某种零散的元素规约整理成联系更加紧密的结构。</p>\n<h3 id=\"词法分析\"><a href=\"#词法分析\" class=\"headerlink\" title=\"词法分析\"></a>词法分析</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  a += <span class=\"number\">5</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> a;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>看这段简单的程序，可以说它是一个函数。</p>\n<p>这个函数又由返回值类型、函数名、参数表和函数体组成。</p>\n<p>继续细化的话可以说每一个部分都由一个或多个词组成。也就是所谓的 TOKEN。我们真正关心的不是 int 由 i、n 和 t 组成，而是 int 这个词所代表的含义。</p>\n<p>这就是词法分析的工作，从源文件中提取出一个一个的词，以简化后续的工作。</p>\n<p>比如这段代码经过词法分析之后的输出可能是 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">ID ID LPAREN ID ID RPAREN LBRACE</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">ID ID ASSIGN INT SEMICOLON</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\t....</span></pre></td></tr></table></figure>\n\n<p>这样我们下一步工作的处理单位就从字符变成了 TOKEN。</p>\n<p>对于 TKOEN 的提取可以采用正则表达式来完成，关于正则表达式的内容可以查阅相关资料。</p>\n<p>这里采用 FLEX 来做词法分析。FLEX 会根据我们所制定的规则生成一个自动机，它会在每次调用 yylex 函数时候返回 yyin 中下一个匹配到某条规则所对应的 TOKEN ID… </p>\n<h3 id=\"语法分析\"><a href=\"#语法分析\" class=\"headerlink\" title=\"语法分析\"></a>语法分析</h3><p>每种语言都有其对应的文法，也就是其 TOKEN 组成的规则。</p>\n<p>比如如果出现这样的 TOKEN 序列，我们可以说这可能是一个声明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">ID ID (int a)</span></pre></td></tr></table></figure>\n\n<p>但如果出现这样的序列，我们就无法将其对应到某条规则</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">ID ID ID</span></pre></td></tr></table></figure>\n\n<p>而语法分析就是将 TOKEN 规约成符合文法的结构。一般为抽象语法树 (Abstract Syntax Tree)</p>\n\n\n<p>需要注意的是我们词法分析产生的 AST 是不考虑语义内容的，只考虑语法内容。也就是下边的表述在语法分析中是符合规则并且可以生成 AST 的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">int a;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">a &#x3D; 1.1;&#x2F;&#x2F; 虽然把 float 赋值给 int 型变量，但是是符合文法的</span></pre></td></tr></table></figure>\n\n<p>但是下边的表述是不符合语法的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">int a,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">a &#x3D; 1, &#x2F;&#x2F; 一个语句的结束应该是 &#39;;&#39; 而不是 &#39;,&#39;</span></pre></td></tr></table></figure>\n\n<p>和词法分析类似，我们使用 Bison 来生成语法分析器。</p>\n<h3 id=\"有限状态自动机\"><a href=\"#有限状态自动机\" class=\"headerlink\" title=\"有限状态自动机\"></a>有限状态自动机</h3><p>词法分析和语法分析是状态机非常典型的应用。</p>\n<p>我所理解的状态机简单来说主要由两部分组成，一部分是状态，另一部分是状态间转化的规则。</p>\n<p>当状态机处于某个状态，收到某种输入时，它就跳转到另一个状态，同时执行某些特定的操作。</p>\n<h2 id=\"语义分析\"><a href=\"#语义分析\" class=\"headerlink\" title=\"语义分析\"></a>语义分析</h2><p>语义分析就是一个静态检查的过程。就如刚才提到的，有很多满足文法的表述其实是不合法的。语义分析就是找到一部分这样的错误。比如把一个浮点数赋值给一个 int 类型的变量，这样的异常是可以在语义检查中发现的。</p>\n<h2 id=\"符号表\"><a href=\"#符号表\" class=\"headerlink\" title=\"符号表\"></a>符号表</h2><p>程序的合法性要建立在一定的上下文中。而符号表就是及其重要的上下文之一。</p>\n<p>比如</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun1</span><span class=\"params\">()</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">int</span> a;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  a = <span class=\"number\">1</span>; <span class=\"comment\">// 合法</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"> \tb = <span class=\"number\">2</span>; <span class=\"comment\">// 不合法</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun2</span><span class=\"params\">()</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">int</span> a;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">int</span> b;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  a = <span class=\"number\">1</span>; <span class=\"comment\">// 合法</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  b = <span class=\"number\">2</span>; <span class=\"comment\">// 合法</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>b = 2 的语句在 fun1 中就是不合法的。因为其上下文中没有定义 b 的符号。</p>\n<p>我们把上下文的符号记录在一个叫符号表的结构里。</p>\n<p>分析实现符号表的需求：</p>\n<ol>\n<li>因为有很多查询的过程，所以符号表的查询性能要好</li>\n<li>符号上下文在变化，所以符号表应该有添加和删除的能力</li>\n<li>符号有作用域，符号表要控制符号的作用域</li>\n</ol>\n<p>综合以上，对于第一条，哈希表无疑是最佳选择之一。</p>\n<p>对于第二三条，栈显然是非常好的选择。</p>\n<p>故而符号表的存储结构靠哈希表来实现，以达到常数复杂度的查询性能。</p>\n<p>同时加入辅助指针，以保持栈的结构。</p>\n\n\n<p>大概是这样的结构。可以通过 hash 快速查找到对应的 node，同时也保证了栈的顺序。 top 指针即栈顶。具体的结构定义可查阅项目源代码的 include/table.h</p>\n<h2 id=\"LLVM-C-Interface\"><a href=\"#LLVM-C-Interface\" class=\"headerlink\" title=\"LLVM C Interface\"></a>LLVM C Interface</h2><p>代码生成采用 LLVM 来做，而写这篇说明最直接的原因就是我在 LLVM 的使用上遇到了一些问题。</p>\n<p>LLVM 提供了很多接口，使用更为广泛的应该是 C++ 接口。但是我因为不想<del>不会</del>写 C++，故而决定通过 C 接口来使用 LLVM。这也是坑的开始…</p>\n<p>C 接口其实是 C++ 接口的封装，故而有一些没有封装的 API 用起来就比较难受了…</p>\n<p>其次 C 接口的文档并不是很完善，也没有什么注释，很多用法还是要回到被封装的 C++ 接口找答案。</p>\n<p>同时 C 接口的 Demo 也很少，似乎用的人不是很多…</p>\n<p>综上，建议直接使用 C++ 接口…</p>\n<p>但是… 就玩具的需求来说，C 接口已经足够了。写这篇文章就是为了总结一下 C 接口简单的使用 hhh。</p>\n<h3 id=\"SSA\"><a href=\"#SSA\" class=\"headerlink\" title=\"SSA\"></a>SSA</h3><p><a href=\"https://en.wikipedia.org/wiki/Static_single_assignment_form\" target=\"_blank\" rel=\"noopener\">SSA WiKi</a></p>\n<h3 id=\"global-variables\"><a href=\"#global-variables\" class=\"headerlink\" title=\"global variables\"></a>global variables</h3>\n\n\n\n<p><a href=\"https://llvm.org/docs/GetElementPtr.html\" target=\"_blank\" rel=\"noopener\">GEP</a></p>"},{"title":"博客落成记","date":"2019-10-17T08:49:07.000Z","_content":"\n不知不觉，走进计算机的世界已经有两年多了。\n\n从一窍不通的小白，到初窥门径，对计算机有了一点自己的认识。有很多开心的瞬间，也有不少沮丧的时刻。\n\n转眼便是大三，印象中从加入技术团队的第一天，学长学姐就教我们要写博客。中途虽有过尝试但是始终没有坚持下来，没有真正把博客搭起来。\n\n一是觉得没有东西可写，所接触的各种各样的知识点网上一大堆，再抄一遍着实没有必要。二是水平不足，说白了就是讲不出有价值的东西，故而也没有动力。\n\n2019 这一年虽简单又平淡，但感觉在这一年里的成长超乎自己的想象。\n\n也许是因为人生中第一次实习，第一份工作，第一次意识到大学生活就要结束…抑或是量变引起质变，登上了一个新的台阶。\n\n总之，突然有了记录和分享的欲望。脑中也多了很多想要分享的东西。就趁着这个机会，把这个个人博客搭起来罢。\n\n我将博客开始日期写为 2017，谨以此纪念从使用者到探索者身份的转变。","source":"_posts/init.md","raw":"---\ntitle: 博客落成记\ndate: 2019-10-17 16:49:07\ntags: other \n\n---\n\n不知不觉，走进计算机的世界已经有两年多了。\n\n从一窍不通的小白，到初窥门径，对计算机有了一点自己的认识。有很多开心的瞬间，也有不少沮丧的时刻。\n\n转眼便是大三，印象中从加入技术团队的第一天，学长学姐就教我们要写博客。中途虽有过尝试但是始终没有坚持下来，没有真正把博客搭起来。\n\n一是觉得没有东西可写，所接触的各种各样的知识点网上一大堆，再抄一遍着实没有必要。二是水平不足，说白了就是讲不出有价值的东西，故而也没有动力。\n\n2019 这一年虽简单又平淡，但感觉在这一年里的成长超乎自己的想象。\n\n也许是因为人生中第一次实习，第一份工作，第一次意识到大学生活就要结束…抑或是量变引起质变，登上了一个新的台阶。\n\n总之，突然有了记录和分享的欲望。脑中也多了很多想要分享的东西。就趁着这个机会，把这个个人博客搭起来罢。\n\n我将博客开始日期写为 2017，谨以此纪念从使用者到探索者身份的转变。","slug":"init","published":1,"updated":"2019-12-11T12:58:50.909Z","_id":"ck41b8aro0003xs860vyg6opj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>不知不觉，走进计算机的世界已经有两年多了。</p>\n<p>从一窍不通的小白，到初窥门径，对计算机有了一点自己的认识。有很多开心的瞬间，也有不少沮丧的时刻。</p>\n<p>转眼便是大三，印象中从加入技术团队的第一天，学长学姐就教我们要写博客。中途虽有过尝试但是始终没有坚持下来，没有真正把博客搭起来。</p>\n<p>一是觉得没有东西可写，所接触的各种各样的知识点网上一大堆，再抄一遍着实没有必要。二是水平不足，说白了就是讲不出有价值的东西，故而也没有动力。</p>\n<p>2019 这一年虽简单又平淡，但感觉在这一年里的成长超乎自己的想象。</p>\n<p>也许是因为人生中第一次实习，第一份工作，第一次意识到大学生活就要结束…抑或是量变引起质变，登上了一个新的台阶。</p>\n<p>总之，突然有了记录和分享的欲望。脑中也多了很多想要分享的东西。就趁着这个机会，把这个个人博客搭起来罢。</p>\n<p>我将博客开始日期写为 2017，谨以此纪念从使用者到探索者身份的转变。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>不知不觉，走进计算机的世界已经有两年多了。</p>\n<p>从一窍不通的小白，到初窥门径，对计算机有了一点自己的认识。有很多开心的瞬间，也有不少沮丧的时刻。</p>\n<p>转眼便是大三，印象中从加入技术团队的第一天，学长学姐就教我们要写博客。中途虽有过尝试但是始终没有坚持下来，没有真正把博客搭起来。</p>\n<p>一是觉得没有东西可写，所接触的各种各样的知识点网上一大堆，再抄一遍着实没有必要。二是水平不足，说白了就是讲不出有价值的东西，故而也没有动力。</p>\n<p>2019 这一年虽简单又平淡，但感觉在这一年里的成长超乎自己的想象。</p>\n<p>也许是因为人生中第一次实习，第一份工作，第一次意识到大学生活就要结束…抑或是量变引起质变，登上了一个新的台阶。</p>\n<p>总之，突然有了记录和分享的欲望。脑中也多了很多想要分享的东西。就趁着这个机会，把这个个人博客搭起来罢。</p>\n<p>我将博客开始日期写为 2017，谨以此纪念从使用者到探索者身份的转变。</p>\n"}],"PostAsset":[{"_id":"source/_posts/git-internal/data-model-1.png","slug":"data-model-1.png","post":"ck41b8arh0000xs86532rej8r","modified":0,"renderable":0},{"_id":"source/_posts/git-internal/image-20191022100218849.png","slug":"image-20191022100218849.png","post":"ck41b8arh0000xs86532rej8r","modified":0,"renderable":0},{"_id":"source/_posts/git-internal/image-20191022162231775.png","slug":"image-20191022162231775.png","post":"ck41b8arh0000xs86532rej8r","modified":0,"renderable":0},{"_id":"source/_posts/git-internal/image-20191022162711988.png","slug":"image-20191022162711988.png","post":"ck41b8arh0000xs86532rej8r","modified":0,"renderable":0},{"_id":"source/_posts/git-internal/image-20191022164648393.png","slug":"image-20191022164648393.png","post":"ck41b8arh0000xs86532rej8r","modified":0,"renderable":0},{"_id":"source/_posts/git-internal/image-20191022170637922.png","slug":"image-20191022170637922.png","post":"ck41b8arh0000xs86532rej8r","modified":0,"renderable":0},{"_id":"source/_posts/git-internal/image-20191022171731843.png","slug":"image-20191022171731843.png","post":"ck41b8arh0000xs86532rej8r","modified":0,"renderable":0},{"_id":"source/_posts/git-internal/image-20191022171907654.png","slug":"image-20191022171907654.png","post":"ck41b8arh0000xs86532rej8r","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"ck41b8arh0000xs86532rej8r","tag_id":"ck41b8arm0002xs86gj4kb62v","_id":"ck41b8arp0005xs863g1parsr"},{"post_id":"ck41b8arl0001xs864scv2nn3","tag_id":"ck41b8arp0004xs863yhl6dal","_id":"ck41b8arq0007xs86bqyub74g"},{"post_id":"ck41b8aro0003xs860vyg6opj","tag_id":"ck41b8arp0006xs867qhz4es0","_id":"ck41b8arq0008xs86bu4z5535"}],"Tag":[{"name":"git","_id":"ck41b8arm0002xs86gj4kb62v"},{"name":"compile","_id":"ck41b8arp0004xs863yhl6dal"},{"name":"other","_id":"ck41b8arp0006xs867qhz4es0"}]}}